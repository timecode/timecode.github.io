<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[shadowcryptic#blog]]></title>
  <link href="http://blog.shadowcryptic.com/atom.xml" rel="self"/>
  <link href="http://blog.shadowcryptic.com/"/>
  <updated>2014-03-18T13:27:37+00:00</updated>
  <id>http://blog.shadowcryptic.com/</id>
  <author>
    <name><![CDATA[Rob Playford]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[add cucumber support to sublime text]]></title>
    <link href="http://blog.shadowcryptic.com/2014/03/18/add-cucumber-support-to-sublime-text/"/>
    <updated>2014-03-18T12:02:27+00:00</updated>
    <id>http://blog.shadowcryptic.com/2014/03/18/add-cucumber-support-to-sublime-text</id>
    <content type="html"><![CDATA[<!-- View or edit the markdown in this file using the [Mou app](http://mouapp.com/) or online at [dillinger.io](http://dillinger.io) -->


<!-- Post description -->


<p>Sublime Text doesn&rsquo;t have out of the box support for Cucumber (Gherkin) syntax highlighting. It&rsquo;s simple enough to add though.</p>

<!-- /Post description -->


<!-- more -->


<p>Add the <a href="https://github.com/npverni/cucumber-sublime2-bundle">cucumber-sublime2-bundle</a> i.e.:</p>

<pre><code>$ cd ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/
$ git clone git://github.com/npverni/cucumber-sublime2-bundle.git Cucumber
</code></pre>

<p>This bundle provides syntax highlighting for both Cucumber Features (Gherkin) and Cucumber Steps. For some reason, comment toggling doesn&rsquo;t appear to work with Gherkin formatting so an additional file is required (as discovered in <a href="https://gist.github.com/unixmonkey/864839/#comment-85069">this gist</a>). To remedy the situation, add a file <code>Comments.tmPreferences</code> to the Cucumber package directory at <code>~/Library/Application Support/Sublime Text 3/Packages/Cucumber/</code>, with the following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple Computer//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>name<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>Comments<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>scope<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>text.gherkin.feature<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>settings<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>        <span class="nt">&lt;key&gt;</span>shellVariables<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>        <span class="nt">&lt;array&gt;</span>
</span><span class='line'>            <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>                <span class="nt">&lt;key&gt;</span>name<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>                <span class="nt">&lt;string&gt;</span>TM_COMMENT_START<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>                <span class="nt">&lt;key&gt;</span>value<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>                <span class="nt">&lt;string&gt;</span># <span class="nt">&lt;/string&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>            <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>                <span class="nt">&lt;key&gt;</span>name<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>                <span class="nt">&lt;string&gt;</span>TM_COMMENT_START_2<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>                <span class="nt">&lt;key&gt;</span>value<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>                <span class="nt">&lt;string&gt;</span>=begin
</span><span class='line'><span class="nt">&lt;/string&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>            <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>                <span class="nt">&lt;key&gt;</span>name<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>                <span class="nt">&lt;string&gt;</span>TM_COMMENT_END_2<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>                <span class="nt">&lt;key&gt;</span>value<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>                <span class="nt">&lt;string&gt;</span>=end
</span><span class='line'><span class="nt">&lt;/string&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>uuid<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>98793a40-e7e7-473a-89ad-74d872ad3a3b<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[setting up my rails BDD stack]]></title>
    <link href="http://blog.shadowcryptic.com/2014/03/17/setting-up-my-rails-bdd-stack/"/>
    <updated>2014-03-17T20:31:11+00:00</updated>
    <id>http://blog.shadowcryptic.com/2014/03/17/setting-up-my-rails-bdd-stack</id>
    <content type="html"><![CDATA[<!-- View or edit the markdown in this file using the [Mou app](http://mouapp.com/) or online at [dillinger.io](http://dillinger.io) -->


<!-- Post description -->


<p>My guide to setting up a BDD stack for a rails app&hellip;</p>

<!-- /Post description -->


<!-- more -->


<p>I initially followed this <a href="https://semaphoreapp.com/blog/2013/08/14/setting-up-bdd-stack-on-a-new-rails-4-application.html">Rails 4 BDD article</a>, however, I&rsquo;ve made a lot of changes to get things how I want them.</p>

<p><em>Other useful bits of information discovered along the way came from articles <a href="http://www.startuprocket.com/introduction-to-app-development">Introduction to App Development</a> and <a href="http://www.startuprocket.com/blog/how-to-setup-a-rails-app-for-test-driven-and-behavior-driven-development-with-rspec-and-capybara-webkit">How to setup a Rails app for Test-Driven- and Behavior-Driven Development with Rspec and Capybara-Webkit</a>.</em></p>

<h2>Install Of Individual Components</h2>

<p><strong>Note</strong>: <em>See <a href="#summary">Summary</a> at end for &lsquo;all-at-once&rsquo; install</em> <br/>
The following steps describe the install of individual parts of the stack. It&rsquo;s best to follow the order as shown.</p>

<h3>INSTALL RSpec</h3>

<p>Add to <code>Gemfile</code>:</p>

<pre><code>group :development, :test do
gem 'rspec-rails', '~&gt; 2.0'
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Bootstrap the app with RSpec by generating its support files and directories:</p>

<pre><code>$ rails generate rspec:install
</code></pre>

<p>Create the RSpec binstub. The binstub will allow you to run RSpec with <code>rspec</code> instead of <code>bundle exec rspec</code>:</p>

<pre><code>$ bundle binstubs rspec-core
</code></pre>

<p>Edit the <code>.rspec</code> file and change the default formatting to:</p>

<pre><code>--color --format doc
</code></pre>

<h3>INSTALL shoulda-matchers</h3>

<p>shoulda-matchers lets us spec common Rails functionality, like validations and associations, with less code. <em><strong>Note</strong>: I&rsquo;m not sure how I&rsquo;m using these at present and they may be superfluous.</em></p>

<p>Add to <code>Gemfile</code>:</p>

<pre><code>group :test do
  gem 'shoulda-matchers'
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<h3>INSTALL Factory Girl</h3>

<p>Factory Girl is &ldquo;a library for setting up Ruby objects as test data&rdquo; or more precisely it is a fixtures replacement. <em>See <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md">Factory Girl docs</a> for usage.</em></p>

<p>Add to <code>Gemfile</code>:</p>

<pre><code>group :development, :test do
  gem 'factory_girl_rails'
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Add to RSpec&rsquo;s <code>spec_helper.rb</code> file:</p>

<pre><code>RSpec.configure do |config|
  .
  .
  .
  # Factory Girl
  config.include FactoryGirl::Syntax::Methods

end
</code></pre>

<p>Add to Cucumber&rsquo;s <code>env.rb</code> file:</p>

<pre><code>  .
  .
  .
  # Factory Girl
  World(FactoryGirl::Syntax::Methods)
</code></pre>

<h3>INSTALL Faker</h3>

<p>Faker allows creation of sample users with semi-realistic names and email addresses    .
Add to <code>Gemfile</code>:</p>

<pre><code>group :test do
  gem 'faker'
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>For example, to add a Rake task for populating the database with sample users:
Create file <code>lib/tasks/sample_data.rake</code>:</p>

<pre><code>namespace :db do
  desc "Fill database with sample data"
  task populate: :environment do
    # To add a specific user
    User.create!(name: "Example User",
                 email: "example@railstutorial.org",
                 password: "foobar",
                 password_confirmation: "foobar")
    # To add many users
    99.times do |n|
      name  = Faker::Name.name
      email = "example-#{n+1}@railstutorial.org"
      password  = "password"
      User.create!(name: name,
                   email: email,
                   password: password,
                   password_confirmation: password)
    end
  end
end
</code></pre>

<p><em>This defines a task <code>db:populate</code> that creates an example user and 99 more.</em></p>

<p>Invoke the Rake task as follows:</p>

<pre><code>$ rake db:reset
$ rake db:populate
$ rake test:prepare
</code></pre>

<p><em><strong>NOTE</strong>: See the <a href="http://faker.rubyforge.org/rdoc/">Faker docs</a> for full fakabilities!</em></p>

<h3>INSTALL Database Cleaner</h3>

<p>Database Cleaner ensures a clean database state for testing.   <br/>
Add to <code>Gemfile</code>:</p>

<pre><code>group :test do
  gem 'database_cleaner'
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Modify the file <code>spec/spec_helper.rb</code> to add Database Cleaner before the final end</p>

<pre><code>$ .
  .
  .
  RSpec.configure do |config|
  .
  .
  .
    # Database Cleaner
    config.before(:suite) do
      DatabaseCleaner.strategy = :transaction
      DatabaseCleaner.clean_with(:truncation)
    end
    config.before(:each) do
      DatabaseCleaner.start
      FactoryGirl.lint            # if FactoryGirl is installed !!!
    end
    config.after(:each) do
      DatabaseCleaner.clean
    end
  end
</code></pre>

<p>Also, modify Cucumber&rsquo;s <code>env.rb</code> file and add the <em><strong>LAST LINE</strong></em> in the following listing:</p>

<pre><code>.
.
.
# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation
DatabaseCleaner.clean_with(:truncation)
</code></pre>

<p>The <a href="https://github.com/bmabey/database_cleaner#rspec-example">RSpec example</a> on the gem site didn&rsquo;t seem to work but the one I&rsquo;ve shown here does! <br/>
The <a href="https://github.com/bmabey/database_cleaner#cucumber-example">Cucumber example</a> mentions that it gets setup Cucumber by default <em><strong>AS LONG AS</strong>_</em> it&rsquo;s present before Cucumber gets bootstrapped!*</p>

<h3>INSTALL Cucumber</h3>

<p>Cucumber helps us both focus on the feature-level and as a high-level integration testing tool.   <br/>
Add to <code>Gemfile</code>:</p>

<pre><code>group :test do
  gem 'cucumber-rails', require: false
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Bootstrap the app with Cucumber by generating its support files and directories:</p>

<pre><code>$ rails generate cucumber:install
</code></pre>

<p>Create the Cucumber binstub. The binstub will allow you to run Cucumber with <code>cucumber</code> instead of <code>bundle exec cucumber</code></p>

<pre><code>$ bundle binstubs cucumber
</code></pre>

<p><em>See the <a href="https://github.com/jnicklas/capybara#using-capybara-with-cucumber">Capybara API</a> for details of how to compose feature steps!</em></p>

<p>I add two files to Cucumber&rsquo;s features directory to start with &hellip; <br/>
The first is <code>support/paths.rb</code>:</p>

<pre><code># features/support/paths.rb
def path_to(page_name)

  case page_name

  # when /^about\s?page$/
  #   then "/static_pages/about"  # example verbose
  when /^home\s?page$/
    then static_pages_home_path   # example using routes
  when /^help\s?page$/
    then static_pages_help_path   # example using routes
  when /^about\s?page$/
    then static_pages_about_path   # example using routes
  # Add more mappings here.
  # Here is an example that pulls values out of the Regexp:
  #
  #   when /^(.*)'s profile page$/i
  #     user_profile_path(User.find_by_login($1))

  else
    begin
      # try and match to a path in the rails routes
      page_name =~ /^(.*\s?page)$/
      path_components = $1.split(/\s+/)
      self.send(path_components.push('path').join('_').to_sym)
    rescue NoMethodError, ArgumentError
      raise "Can't find mapping from \"#{page_name}\" to a path.\n" +
        "Now, go and add a mapping in #{__FILE__}"
    end
  end
end
</code></pre>

<p>The second is <code>step_definitions/common_steps.rb</code>:</p>

<pre><code># features/step_definitions/common_steps.rb
# See the Capybara API for usage
# https://github.com/jnicklas/capybara#clicking-links-and-buttons

When(/^I (go to|visit) the (.*?)$/) do |parlance, page|
  visit(path_to(page))
end

Then(/^I should see "(.*?)"$/) do |text|
  page.should have_content(text)
end
</code></pre>

<h3>INSTALL selenium-webdriver</h3>

<p><em><strong>TODO</strong>: capybara-webkit ??? Possible alternative?</em>
To be able to run Cucumber scenarios which use Javascript you need selenium-webdriver.</p>

<p>Add to <code>Gemfile</code>:</p>

<pre><code>group :test do
  gem 'selenium-webdriver'
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<h3>INSTALL Spring</h3>

<p>Add to <code>Gemfile</code>:</p>

<pre><code>group :development, :test do
  gem 'spring'
  gem 'spring-commands-rspec'
  gem 'spring-commands-cucumber'
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Bootstrap Spring (this should be done after installing anything that gets put into <code>bin/</code>, such as Rspec, Cucumber, etc):</p>

<pre><code>$ spring binstub --all
</code></pre>

<p>When using Spring with Guard (see below), ensure it is included in each <code>guard</code> listed in the <code>Guardfile</code>, for example:</p>

<pre><code>guard :rspec, cmd:"spring rspec" do
.
.
.
</code></pre>

<p>If required (not usually), Spring&rsquo;s status can be checked with:</p>

<pre><code>$ spring status
</code></pre>

<p>Also, if required, Spring&rsquo;s can be stopped with:</p>

<pre><code>$ spring stop
</code></pre>

<h3>INSTALL SimpleCov</h3>

<p>Add to <code>Gemfile</code>:</p>

<pre><code>group :test do
  gem 'simplecov', require: false
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Load and launch SimpleCov at the very top of your <code>test/test_helper.rb</code> <br/>
<em>(or <code>spec_helper.rb</code>, cucumber <code>env.rb</code>, or whatever your preferred test framework uses):</em></p>

<pre><code>require 'simplecov' # if using simple simplecov
# see https://github.com/colszowka/simplecov#filters for filter/grouping etc
SimpleCov.start do  # for example...
  add_filter '/spec/'
  add_filter '/features/'
  add_filter '/config/'
  add_group 'Controllers', 'app/controllers'
  add_group 'Models', 'app/models'
  add_group 'Helpers', 'app/helpers'
  # add_group 'Views', 'app/views' # only .rb files are included at present!
  add_group 'Libraries', 'lib'
end
# Previous content of helper now start here
</code></pre>

<p>Ensure the <code>.gitignore</code> file includes:</p>

<pre><code># Simplecov results
/coverage
</code></pre>

<p><em>See <a href="https://github.com/colszowka/simplecov#configuring-simplecov">Configuring SimpleCov</a></em></p>

<h3>INSTALL Guard</h3>

<p>Add to <code>Gemfile</code>:</p>

<pre><code>group :development, :test do
  gem 'guard'
  gem 'guard-bundler'
  gem 'guard-rails'
  gem 'guard-rspec'
  gem 'guard-cucumber'
  gem 'guard-puma' # to have Guard use the Puma server rather than WEBrick
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Generate an initial <code>Guardfile</code> with:</p>

<pre><code>$ guard init
</code></pre>

<p>Ensure guard details, similar to my prefered settings below, are in <code>Guardfile</code></p>

<pre><code># A sample Guardfile
# More info at https://github.com/guard/guard#readme

guard :bundler do
  # https://github.com/guard/guard-bundler
  watch('Gemfile')
  # Uncomment next line if your Gemfile contains the `gemspec' command.
  # watch(/^.+\.gemspec/)
end

guard :rails do
  watch('Gemfile.lock')
  watch(%r{^(config|lib)/.*})
end

guard :puma do
  watch('Gemfile.lock')
  watch(%r{^config|lib|api/.*})
end

guard :rspec,
    all_on_start: false,
    all_after_pass: false,
    cmd: 'time spring rspec --format progress' do

  # https://github.com/guard/guard-rspec

  watch(%r{^spec/.+_spec\.rb$})
  watch(%r{^lib/(.+)\.rb$})     { |m| "spec/lib/#{m[1]}_spec.rb" }
  watch('spec/spec_helper.rb')  { "spec" }

  # Rails example
  watch(%r{^app/(.+)\.rb$})                           { |m|
    "spec/#{m[1]}_spec.rb" }
  watch(%r{^app/(.*)(\.erb|\.haml|\.slim)$})          { |m|
    "spec/#{m[1]}#{m[2]}_spec.rb" }
  watch(%r{^app/controllers/(.+)_(controller)\.rb$})  { |m|
    ["spec/routing/#{m[1]}_routing_spec.rb",
    "spec/#{m[2]}s/#{m[1]}_#{m[2]}_spec.rb",
    "spec/acceptance/#{m[1]}_spec.rb"] }
  watch(%r{^spec/support/(.+)\.rb$})                  { "spec" }
  watch('config/routes.rb')                           { "spec/routing" }
  watch('app/controllers/application_controller.rb')  { "spec/controllers" }

  # Capybara features specs
  watch(%r{^app/views/(.+)/.*\.(erb|haml|slim)$})     { |m|
    "spec/features/#{m[1]}_spec.rb" }

  # Turnip features and steps
  watch(%r{^spec/acceptance/(.+)\.feature$})
  watch(%r{^spec/acceptance/steps/(.+)_steps\.rb$})   { |m|
    Dir[File.join("**/#{m[1]}.feature")][0] || 'spec/acceptance' }
end

guard :cucumber,
    all_on_start: false,
    all_after_pass: false,
    change_format: 'pretty',
    binstubs: true,
    command_prefix: 'time',
    cli: '--format progress --strict' do

  # https://github.com/guard/guard-cucumber

  watch(%r{^features/.+\.feature$})
  watch(%r{^features/support/.+$})          { 'features' }
  watch(%r{^features/step_definitions/(.+)_steps\.rb$}) { |m|
    Dir[File.join("**/#{m[1]}.feature")][0] || 'features' }

  # Capybara features specs
  watch(%r{^app/views/.*})          { 'features' }
  watch(%r{^app/controllers/.*})    { 'features' }
end
</code></pre>

<p>Run Guard (through Bundler) in a separate terminal window:</p>

<pre><code>$ bundle exec guard
</code></pre>

<p><em>See <a href="https://github.com/guard/guard">guard</a></em> <br/>
<em>See <a href="https://github.com/guard/guard-bundler">guard-bundler</a></em> <br/>
<em>See <a href="https://github.com/guard/guard-rails">guard-rails</a></em> <br/>
<em>See <a href="https://github.com/guard/guard-rspec">guard-rspec</a></em> <br/>
<em>See <a href="https://github.com/guard/guard-cucumber">guard-cucumber</a></em>  <br/>
<em>See <a href="https://github.com/jc00ke/guard-puma">guard-puma</a></em></p>

<p><a name="summary"></a></p>

<h2>Summary</h2>

<p><em>Install RSpec, shoulda-matchers, Factory Girl, Cucumber, selenium-webdriver, SimpleCov, Spring, and Guard in one go</em></p>

<p>Add to <code>Gemfile</code>:</p>

<pre><code># BDD
gem 'faker'

group :development, :test do
  gem 'rspec-rails'
  gem 'spring'
  gem 'spring-commands-rspec'
  gem 'spring-commands-cucumber'
  gem 'factory_girl_rails'
  gem 'guard'
  gem 'guard-bundler'
  gem 'guard-rails'
  gem 'guard-rspec'
  gem 'guard-cucumber'
  gem 'guard-puma' # to have Guard use the Puma server rather than WEBrick
end

group :test do
  gem 'shoulda-matchers'
  gem 'cucumber-rails', require: false
  gem 'database_cleaner'
  gem 'selenium-webdriver'
  gem 'simplecov', require: false
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Bootstrap the app with RSpec and Cucumber by generating their support files and directories:</p>

<pre><code>$ rails generate rspec:install
$ rails generate cucumber:install
</code></pre>

<p>Create the RSpec and Cucumber binstub. The binstubs allow you to run RSpec and Cucumber with <code>rspec</code> and <code>cucumber</code> instead of <code>bundle exec rspec</code> and <code>bundle exec cucumber</code>. They will both be modified by the <code>spring binstub</code> command, so run that one last!:</p>

<pre><code>$ bundle binstubs rspec-core
$ bundle binstubs cucumber
$ spring binstub --all
</code></pre>

<p>Edit the file <code>.rspec</code> and change the default formatting to:</p>

<pre><code>--color --format doc
</code></pre>

<p>Load and launch SimpleCov at the very top of your <code>test/test_helper.rb</code> <br/>
<em>(or <code>spec_helper.rb</code>, cucumber <code>env.rb</code>, or whatever your preferred test framework uses):</em></p>

<pre><code>require 'simplecov' # if using simple simplecov
# see https://github.com/colszowka/simplecov#filters for filter/grouping etc
SimpleCov.start do  # for example...
  add_filter '/spec/'
  add_filter '/features/'
  add_filter '/config/'
  add_group 'Controllers', 'app/controllers'
  add_group 'Models', 'app/models'
  add_group 'Helpers', 'app/helpers'
  # add_group 'Views', 'app/views' # only .rb files are included at present!
  add_group 'Libraries', 'lib'
end
# This should be the default now, but just in case ...
# SimpleCov.use_merging true
# Previous content of helper now start here
</code></pre>

<p>add to <code>.gitignore</code> file:</p>

<pre><code># Simplecov results
/coverage
</code></pre>

<p>Generate an initial <code>Guardfile</code> with:</p>

<pre><code>$ guard init
</code></pre>

<p><em>See instructions in Guard&rsquo;s individual install (above) regarding <strong>MY</strong> preferred <code>Guardfile</code> contents</em></p>

<p>Run Guard (through Bundler) in a separate terminal window:</p>

<pre><code>$ bundle exec guard
</code></pre>

<p><strong>Note</strong>: To run Rspec and Cucumber, just issue <code>rake</code> at the coomand line. The format should be verbose (doc / pretty)! During regular Guard runs the format should be minimal (progress dots only, unless there are failures of course, in which case the settings above provide for a temporarily detailed output).</p>

<p>Make git commit</p>

<pre><code>$ git add .
$ git commit -m "Add BDD stack"
$ git push -u origin --all
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails development bookmarks]]></title>
    <link href="http://blog.shadowcryptic.com/2014/03/17/rails-dev-bookmarks/"/>
    <updated>2014-03-17T08:00:00+00:00</updated>
    <id>http://blog.shadowcryptic.com/2014/03/17/rails-dev-bookmarks</id>
    <content type="html"><![CDATA[<!-- View or edit the markdown in this file using the [Mou app](http://mouapp.com/)
or online at [dillinger.io](http://dillinger.io) -->




<!-- Post description -->


<p>I have some preset set of tabs that I like to have open before I start developing.</p>

<!-- /Post description -->


<!-- more -->


<p><strong>Tip</strong>: Create separate Safari windows in different workspaces. <br/>
<em>Using workspaces, I can swipe between &lsquo;sets&rsquo; of tabs.</em>
<em>During development, if I want to keep any additional tabs for a project, they
may be saved in a new Safari bookmarks folder with a project specific name.
See Safari > Bookmarks > Add Bookmarks For These x Tabs</em></p>

<h3>Open a bookmark tab set in window #1:</h3>

<!-- more -->


<p><em>Default Safari bookmark folder name &lsquo;RailsDev #1&rsquo;</em></p>

<ul>
<li><a href="http://blog.shadowcryptic.com">My blog</a> (for my notes) <br/>
<em>Any look-ups and research will all end up in this window.</em></li>
</ul>


<h3>Open a bookmark tab set in window #2:</h3>

<p><em>Default Safari bookmark folder name &lsquo;RailsDev #2&rsquo;</em></p>

<ul>
<li><p><a href="https://dashboard.heroku.com/apps">Heroku dashboard</a></p></li>
<li><p>Remote site (served by <a href="https://www.heroku.com/">Heroku</a>):</p>

<pre><code>https://rails-app-name.herokuapp.com
</code></pre></li>
<li><p>Local site (served by <a href="http://pow.cx">POW</a>):</p>

<pre><code>http://rails-app-name.dev
</code></pre></li>
<li><p>Simplecov results for current project:</p>

<pre><code>file:///path-to-rails-app-directory/coverage/index.html
</code></pre></li>
</ul>


<h3>Open a bookmark tab set in window #3:</h3>

<p><em>Default Safari bookmark folder name &lsquo;RailsDev #3&rsquo;</em></p>

<ul>
<li><p><a href="http://api.rubyonrails.org/">Rails RDOC</a></p></li>
<li><p><a href="https://github.com/jnicklas/capybara#the-dsl">Capybara</a></p></li>
<li><p><a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md#getting-started">Factory Girl</a></p></li>
<li><p><a href="http://faker.rubyforge.org/rdoc/">Faker</a></p></li>
<li><p>RSpec</p>

<ul>
<li><a href="https://www.relishapp.com/rspec/rspec-rails/v/3-0/docs">Rails</a></li>
<li><a href="https://www.relishapp.com/rspec/rspec-core/v/3-0/docs">Core</a></li>
<li><a href="https://www.relishapp.com/rspec/rspec-expectations/v/3-0/docs">Expectations</a></li>
<li><a href="https://www.relishapp.com/rspec/rspec-mocks/v/3-0/docs">Mocks</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[making web-pages look nice]]></title>
    <link href="http://blog.shadowcryptic.com/2014/03/17/making-web-pages-look-nice/"/>
    <updated>2014-03-17T08:00:00+00:00</updated>
    <id>http://blog.shadowcryptic.com/2014/03/17/making-web-pages-look-nice</id>
    <content type="html"><![CDATA[<!-- View or edit the markdown in this file using the [Mou app](http://mouapp.com/)
or online at [dillinger.io](http://dillinger.io) -->




<!-- Post description -->


<p>It&rsquo;s not that natural for developers to do design, but it helps make things look and feel a lot more finished, even when they&rsquo;re not.  A little help from a few design related sites goes a long way.</p>

<!-- /Post description -->


<!-- more -->


<p>Check out the following:</p>

<ul>
<li><a href="http://24ways.org/2012/how-to-make-your-site-look-half-decent/">How to Make Your Site Look Half-Decent in Half an Hour</a></li>
</ul>


<p><em>I&rsquo;ll add to this list as I come across anything new or better</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[creating a new heroku rails 4 app]]></title>
    <link href="http://blog.shadowcryptic.com/2014/03/16/creating-a-new-heroku-rails-4-app/"/>
    <updated>2014-03-16T23:49:53+00:00</updated>
    <id>http://blog.shadowcryptic.com/2014/03/16/creating-a-new-heroku-rails-4-app</id>
    <content type="html"><![CDATA[<!-- View or edit the markdown in this file using the [Mou app](http://mouapp.com/)
or online at [dillinger.io](http://dillinger.io) -->




<!-- Post description -->


<p>My guide to setting up a rails app from scratch&hellip;</p>

<p><em>Current known to work with at least Ruby 2.1.1 and Rails 4.0.3</em></p>

<!-- /Post description -->


<!-- more -->


<h3>Suppress Ri And Rdoc Documentation</h3>

<p>In file <code>~/.gemrc</code> ensure the following:</p>

<pre><code>install: --no-rdoc --no-ri
update:  --no-rdoc --no-ri
</code></pre>

<h3>Setup rvm Initial State &hellip;</h3>

<pre><code>$ rvm use 2.1.1@rails-app-name --create
</code></pre>

<p><em>At any stage, use <code>$ rvm info</code> to see the current rvm environment.</em></p>

<h3>Ensure Rails 4 Is Installed</h3>

<pre><code>$ rails --version
Rails 4.0.3
</code></pre>

<p>If not &hellip;</p>

<pre><code>$ sudo gem install rails --version 4.0.3 --no-ri --no-rdoc
</code></pre>

<h3>Install Two Gems Initially Required For Heroku</h3>

<pre><code>$ gem install pg rails_12factor
</code></pre>

<p><em>Postgresql may need installing! See <a href="http://postgresapp.com">Postgres.app</a></em></p>

<h3>Create New Rails App</h3>

<pre><code>$ mkdir rails_projects
$ cd rails_projects
$ rails new rails-app-name --database=postgresql --skip-test-unit
$ cd rails-app-name
</code></pre>

<p><em><strong>Note</strong>: All commands below are assumed to be invoked from the rails-app-name directory.</em></p>

<p>Open the whole project in an editor &hellip;</p>

<pre><code>$ mate ./
</code></pre>

<h3>Use rvm Helpers For Project</h3>

<p>For a Rails project, add to the top of the <code>Gemfile</code>:</p>

<pre><code>source 'https://rubygems.org'
ruby '2.1.1'
#ruby-gemset=rails-app-name
</code></pre>

<p><em>rvm will now use these settings each time this app directory is used.</em><br/>
<em>Note: The Ruby version on the local machine should be the same as a Heroku supported version. See <a href="https://devcenter.heroku.com/articles/ruby-support#ruby-versions">list of Heroku supported ruby-versions</a>.</em></p>

<p><strong>Or</strong>, for rvm to switch Ruby version and gemset for <strong>any</strong> type of project &hellip;</p>

<pre><code>$ cat &gt; .ruby-version &lt;&lt; 2.1.0
$ cat &gt; .ruby-gemset &lt;&lt; rails-app-name
$ cat &gt; .rvmrc &lt;&lt; rvm use `cat .ruby-version`@`cat .ruby-gemset`
$ rvm rvmrc warning ignore all.rvmrcs
$ source .rvmrc
</code></pre>

<h3>If Using The <a href="http://pow.cx">POW</a> Rack Server</h3>

<p>Create a <code>.powrc</code> file (if required):</p>

<!--  -->


<pre><code>cat &gt; .powrc &lt;&lt; EOF
if [ -f "$rvm_path/scripts/rvm" ]; then
  source "$rvm_path/scripts/rvm"
  rvm use .
fi
EOF
</code></pre>

<p>Add a symlink so POW knows where to serve the project from:</p>

<!--  -->


<pre><code>$ ln -is `pwd` ~/.pow/${PWD##*/}
</code></pre>

<h3>Setup Database(s)</h3>

<p>In the file <code>config/database.yml</code> <strong>REMOVE</strong> from <strong>EACH</strong> db config:</p>

<pre><code>username: rails-app-name
</code></pre>

<p>and add to each db config:</p>

<pre><code>host: localhost
port: 5432
</code></pre>

<p>then run</p>

<pre><code>$ rake db:create:all
</code></pre>

<h3>Add Initial Gems For Heroku</h3>

<p>Add heroku requirements to <code>Gemfile</code>:</p>

<pre><code># Heroku
gem 'rails_12factor', group: :production
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<h3>Add A Dynamically Generated Security Token</h3>

<p>Remove standard token and add the following code to the file <code>config/initializers/secret_token.rb</code>:</p>

<pre><code># Comment out the original token...
# SampleApp::Application.config.secret_key_base = '...a_very_long_ascii_string...'

require 'securerandom'

def secure_token
  token_file = Rails.root.join('.secret')
  if File.exist?(token_file)
    # Use the existing token.
    File.read(token_file).chomp
  else
    # Generate a new token and store it in token_file.
    token = SecureRandom.hex(64)
    File.write(token_file, token)
    token
  end
end

SampleApp::Application.config.secret_key_base = secure_token
</code></pre>

<h3>Enforce HTTPS Connections</h3>

<p>Ensure a line, forcing the use of SSL in production, is uncommented and set to true in <code>config/environments/production.rb</code>:</p>

<pre><code>SampleApp::Application.configure do
  .
  .
  .
  # Force all access to the app over SSL, use Strict-Transport-Security,
  # and use secure cookies.
  config.force_ssl = true
  .
  .
  .
end
</code></pre>

<p>Also, set up SSL on the remote server. Configuring a production site to use SSL, among other things, involves purchasing an SSL certificate for the domain.</p>

<p><strong>Note</strong>: SSL is included automatically for applications running on a Heroku domain! To run SSL on a custom domain, see the guide on <a href="https://devcenter.heroku.com/articles/ssl-endpoint">setting up an SSL Endpoint</a>.</p>

<h3>Verify App (So Far)</h3>

<pre><code>$ rails server
</code></pre>

<p><em>&hellip; visit <a href="http://localhost:3000">locally hosted app</a> in a browser</em> <br/>
<em>Maybe click the &lsquo;<a href="http://localhost:3000/rails/info/properties">About your application’s environment</a>&rsquo; link to see all is OK!</em>  <br/>
*<strong>NOTE</strong>: If using the <a href="http://pow.cx">POW</a> Rack server, the app is available locally at <a href="http://rails-app-name.dev*">http://rails-app-name.dev*</a></p>

<h3>Add A Folder To Hold Any App Constants</h3>

<pre><code>$ mkdir config/initializers/constants
</code></pre>

<p>Add a constants file:</p>

<pre><code>$ touch config/initializers/constants/_site_config.rb
</code></pre>

<p>Add an ENUMS file (if required) with contents such as:</p>

<pre><code>$ touch config/initializers/constants/_enums.rb
  # Example ENUM
  module Role
    SUPER   = 3
    ADMIN   = 2
    USER    = 1
    PENDING = 0
  end
  # Role::ADMIN     # Example use case (site wide)
</code></pre>

<h3>Add An Initial Index Page (If Required)</h3>

<pre><code>$ rails generate controller Welcome

$ cat &gt; app/views/welcome/index.html.erb &lt;&lt; EOF
&lt;h2&gt;Hello World&lt;/h2&gt;
&lt;p&gt;The time is now: &lt;%= Time.now %&gt;&lt;/p&gt;
EOF
</code></pre>

<p>In file <code>config/routes.rb</code> ensure &hellip;</p>

<pre><code>root 'welcome#index'
</code></pre>

<h3>Update The Readme File (If Required)</h3>

<p>Change the inital <code>README.rdoc</code> file extension to use markdown format i.e. <code>README.md</code> and start a description of the app i.e.</p>

<pre><code>#Ruby on Rails: Test application

This is a *Ruby on Rails* test application.
See the API [API on-line docs](http://api.rubyonrails.org) when stuck!

*By Rob Playford*
</code></pre>

<h3>Add Git</h3>

<p>Initialise Git repo</p>

<pre><code>$ git init
</code></pre>

<p>Ensure the file <code>.gitignore</code> has any required additional details such as &hellip;</p>

<pre><code># Ignore other unneeded files.
database.yml
doc/
*.swp
*~
.project
.idea
.secret
# Mac finder artifacts
.DS_Store
# ENV
.env
# Simplecov results
/coverage
# FactoryGirl
/spec/factories
</code></pre>

<p>Make initial commit</p>

<pre><code>$ git add .
$ git commit -m "Initial commit - Basic Rails 4 app"
$ git remote add origin git@bitbucket.org:user_name/rails-app-name.git
$ git push -u origin --all  # pushes up the repo and its refs for the first time
$ git push -u origin --tags # pushes up any tags
</code></pre>

<p>Branch</p>

<pre><code>$ git checkout -b topic_branch_description
</code></pre>

<p><em>Experiment and make changes in a &lsquo;topic&rsquo; branch.</em> <br/>
<em>The &lsquo;master&rsquo; branch is then insulated from these changes.</em></p>

<p>Commit(s)</p>

<pre><code>$ git add --all
$ git commit -m "Update the thingamejig"
</code></pre>

<p><em>Make commits as and when appropriate.</em> <br/>
<em>Note: Write commit messages in the present tense. Git models commits as a series of patches, so describe what each commit does rather than what it did.</em></p>

<p>See list of current branches</p>

<pre><code>$ git branch
</code></pre>

<p>Merge</p>

<pre><code>$ git checkout master
Switched to branch 'master'
$ git merge topic_branch_description
</code></pre>

<p><em>Merge the topic branch back into master when topic is complete.</em></p>

<p>To delete the topic branch</p>

<pre><code>$ git branch -d topic_branch_description
</code></pre>

<p><em><strong>ONLY</strong> tidy up by deleting topic branches <strong>IF</strong> finished with them.</em></p>

<p>Push to remote repo (i.e. GitHub or BitBucket etc)</p>

<pre><code>$ git push -u origin --all
</code></pre>

<h3>Deploy To Heroku</h3>

<pre><code>$ heroku create
http://crazy-heroku-name.herokuapp.com/ | git@heroku.com:crazy-heroku-name.git
Git remote heroku added
</code></pre>

<p>Verify that the heroku remote was added to your project by running</p>

<pre><code>$ git config -l
</code></pre>

<p>Rename app (if required)</p>

<pre><code>$ heroku rename rails-app-name
</code></pre>

<p><em>Maybe choose <code>rails-app-name-dev</code> whilst the app is still in development?</em></p>

<p>Deploy code</p>

<pre><code>$ git push heroku master
</code></pre>

<p><em>Note: It is always a good idea to check to see if there are any warnings or errors in the output.</em></p>

<p>If everything went well, migrate the database</p>

<pre><code>$ heroku run rake db:migrate
</code></pre>

<p>&hellip; and visit <a href="https://rails-app-name.herokuapp.com/">remotely hosted app</a> in a browser, or run &hellip;</p>

<pre><code>$ heroku open
</code></pre>

<p>If you run into any problems getting the app to perform properly, check the logs.</p>

<pre><code>$ heroku logs --tail
</code></pre>

<p><strong>Note</strong></p>

<ul>
<li><p><strong>Free</strong> Dyno usage&hellip;<br/>
<code>$ heroku ps:scale web=1</code> # 750 Free hours (goes into auto sleep after 1 hour)<br/>
<code>$ heroku ps:scale web=2</code> # 375 Free hours (won&rsquo;t auto sleep after 1 hour)</p></li>
<li><p>A web dyno that is sleeping continues to accrue usage. To stop accruing usage on an app that is sleeping&hellip;<br/>
<code>$ heroku ps:scale web=0</code> # scale to 0!</p></li>
<li><p>To see how many hours an app has used, visit your <a href="https://dashboard.heroku.com/account">account page</a> and look at the current invoice. Under &lsquo;Billing/Current Usage&rsquo; click on &lsquo;details&rsquo;. The resulting invoice allows each app to be clicked on in order to view its &lsquo;Dyno-hours&rsquo; and other billing info.</p></li>
<li><p>Heroku allows commands to be run on the remote end<br/>
<code>$ heroku run</code> # <em>followed by whatever command is required</em></p></li>
</ul>


<h3>Add &lsquo;Auto Heroku-App-Version-Number&rsquo; (If Required)</h3>

<p>Add to heroku&rsquo;s requirements in <code>Gemfile</code>:</p>

<pre><code># Heroku
gem 'heroku-api'
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Add your App name (see <a href="https://dashboard.heroku.com/apps">Apps page</a>) and API key (see <a href="https://dashboard.heroku.com/account">Account page</a>) to the Heroku config:</p>

<pre><code>$ heroku config:add HEROKU_APP_NAME=rails-app-name HEROKU_API_KEY=daa2a90ed0...
$ touch config/initializers/heroku.rb
</code></pre>

<p>Then, in file <code>config/initializers/heroku.rb</code> put:</p>

<pre><code>unless (app_name = ENV["HEROKU_APP_NAME"]).nil?
  require 'heroku-api'

  heroku  = Heroku::API.new(:api_key =&gt; ENV["HEROKU_API_KEY"])
  release = heroku.get_releases(app_name).body.last

  ENV["HEROKU_RELEASE_NAME"] = release["name"]
end
</code></pre>

<p>Finally, use <code>ENV["HEROKU_RELEASE_NAME"]</code> where required within the app&rsquo;s code.</p>

<!--  -->


<pre><code>&lt;h2&gt;Welcome to my app
&lt;%= " - #{ENV["HEROKU_RELEASE_NAME"]}" if ENV["HEROKU_RELEASE_NAME"] %&gt;
&lt;/h2&gt;
</code></pre>

<p><em>Alternatively, assign the <code>ENV["HEROKU_RELEASE_NAME"]</code> to a constant and use that throughout the app instead.</em></p>

<h3>Change Server (If Required)</h3>

<p><em>Note: Webrick is the default, so to use a different web server&hellip;</em></p>

<h4>Puma</h4>

<p>Add requirement to <code>Gemfile</code> i.e.</p>

<pre><code># Use Puma as the Rails server 
gem 'puma'
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
$ touch Procfile
</code></pre>

<p>The file <code>Procfile</code> should read &hellip;</p>

<pre><code>web: bundle exec puma -p $PORT
</code></pre>

<p>Setup Environmental Variables, RACK_ENV and PORT.
The file <code>.env</code> should read &hellip;</p>

<pre><code># Environment
RAILS_ENV=development
RACK_ENV=development
# Port
PORT=3000
# local Redis-server
REDISCLOUD_URL="http://0.0.0.0:6379"
</code></pre>

<p><em>Note: Before pushing to Heroku, test with RACK_ENV set to production as that&rsquo;s the enviroment Heroku will run the app in!</em></p>

<p>Test the Procfile locally using Foreman. Install Forman with <code>$ gem install foreman</code> if required.</p>

<pre><code>$ foreman start
</code></pre>

<p><em>Note: Foreman uses the <code>.env</code> file, BUT <code>rails server</code> does not!</em></p>

<p>Deploy changes to Heroku</p>

<pre><code>$ git add --all
$ git commit -m "use puma via procfile"
$ git push -u origin                      # optional push to remote repo
$ git push heroku master
</code></pre>

<p>Check <code>heroku ps</code>, and note the web process uses the new command specifying Unicorn as the web server</p>

<pre><code>$ heroku ps
</code></pre>

<h4>Unicorn</h4>

<p>Add requirement to <code>Gemfile</code> i.e.</p>

<pre><code># Use Unicorn as the Rails server
gem 'unicorn'
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Create a configuration file for Unicorn at <code>config/unicorn.rb</code>:</p>

<pre><code>$ cat &gt; config/unicorn.rb &lt;&lt; EOF
worker_processes Integer(ENV["WEB_CONCURRENCY"] || 3)
timeout 15
preload_app true

before_fork do |server, worker|
  Signal.trap 'TERM' do
    puts 'Unicorn master intercepting TERM and sending myself QUIT instead'
    Process.kill 'QUIT', Process.pid
  end

  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.connection.disconnect!
end

after_fork do |server, worker|
  Signal.trap 'TERM' do
    puts 'Unicorn worker intercepting TERM and doing nothing. Wait for master to send QUIT'
  end

  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.establish_connection
end
EOF
</code></pre>

<p><em>Note: for different setup configuration try <a href="http://unicorn.bogomips.org/Unicorn/Configurator.html">the unicorn onfigurator</a>.</em></p>

<p>The file <code>Procfile</code> (create in the application&rsquo;s root directory if required) should read &hellip;</p>

<pre><code>web: bundle exec unicorn -p $PORT -c ./config/unicorn.rb
</code></pre>

<p>Then, as above in Puma setup, set ENV and run with forman!</p>

<h3>Check App In Production Mode <strong>LOCALLY</strong></h3>

<p>The file <code>.env</code> should read &hellip;</p>

<pre><code># Environment
RAILS_ENV=production
RACK_ENV=production
# Port
PORT=3000
# local Redis-server
REDISCLOUD_URL="http://0.0.0.0:6379"
</code></pre>

<p>When testing the production environment LOCALLY, you have to COMPILE the ASSETS by hand. Simply run the command below:</p>

<pre><code>$ bundle exec rake assets:precompile
</code></pre>

<p><em>It will generate all the assets under public/assets.</em></p>

<p>Rails has to serve the assets itself too, so change this line to be true in production.rb:</p>

<pre><code>config.serve_static_assets = true
</code></pre>

<p><em><strong>BUT</strong>!!! make sure you set it back to false before pushing the code to a REAL production environment!</em></p>

<p>Finally, ensure the production database is set before starting the server &hellip;</p>

<pre><code>$ rake db:create
$ foreman start
</code></pre>

<h3>Check App In Development Mode <strong>LOCALLY</strong></h3>

<p>The file <code>.env</code> should read &hellip;</p>

<pre><code># Environment
RAILS_ENV=development
RACK_ENV=development
# Port
PORT=3000
# local Redis-server
REDISCLOUD_URL="http://0.0.0.0:6379"
</code></pre>

<p>Ensure the development database is set before starting the server &hellip;</p>

<pre><code>$ rake db:create
$ foreman start
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown notes]]></title>
    <link href="http://blog.shadowcryptic.com/2014/03/16/markdown-notes/"/>
    <updated>2014-03-16T11:27:22+00:00</updated>
    <id>http://blog.shadowcryptic.com/2014/03/16/markdown-notes</id>
    <content type="html"><![CDATA[<!-- View or edit the markdown in this file using the [Mou app](http://mouapp.com/)
or online at [dillinger.io](http://dillinger.io) -->




<!-- Post description -->


<p>Octopress appears to have some issues rendering its codeblocks.</p>

<!-- /Post description -->


<!-- more -->


<p>See <a href="http://octopress.org/docs/blogging/code/">Sharing Code Snippets</a>
And</p>

<ul>
<li><a href="http://daringfireball.net/projects/markdown/syntax">Markdown syntax</a></li>
<li><a href="https://help.github.com/articles/github-flavored-markdown">GitHub Flavored Markdown syntax</a></li>
<li><a href="http://michelf.ca/projects/php-markdown/extra/">Markdown Extra</a>
<!-- more --></li>
</ul>


<h3>Syntax</h3>

<pre><code>``` [language] [title] [url] [link text] [linenos:false] [start:#] [mark:#,#-#]
code snippet
```
</code></pre>

<p>Or</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&#123;% codeblock [lang:language] [title] [url] [link text] [start:#] [mark:#,#-#] [linenos:false] %&#125;
</span><span class='line'>code snippet
</span><span class='line'>&#123;% endcodeblock %&#125;</span></code></pre></td></tr></table></div></figure>


<h3>A ruby example</h3>

<pre><code>``` ruby a ruby example
require 'redcarpet'
markdown = Redcarpet.new("Hello World!")
puts markdown.to_html
```
</code></pre>

<p>produces</p>

<figure class='code'><figcaption><span>a ruby example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;redcarpet&#39;</span>
</span><span class='line'><span class="n">markdown</span> <span class="o">=</span> <span class="no">Redcarpet</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Hello World!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">markdown</span><span class="o">.</span><span class="n">to_html</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Another ruby example with extras (NOT WORKING ???)</h3>

<pre><code>``` ruby a ruby example Discover if a number is prime http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/ Source Article linenos:false start:51 mark:52,53-54
class Fixnum
  def prime?
    ('1' * self) !~ /^1?$|^(11+?)\1+$/
  end
end
```
</code></pre>

<p>produces</p>

<figure class='code'><figcaption><span>a ruby example Discover if a number is prime</span><a href='http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/'>Source Article linenos:false start:51 mark:52,53-54</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>    <span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">*</span> <span class="nb">self</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown cheatsheet]]></title>
    <link href="http://blog.shadowcryptic.com/2014/03/15/markdown-cheatsheet/"/>
    <updated>2014-03-15T13:00:00+00:00</updated>
    <id>http://blog.shadowcryptic.com/2014/03/15/markdown-cheatsheet</id>
    <content type="html"><![CDATA[<!-- View or edit the markdown in this file using the [Mou app](http://mouapp.com/)
or online at [dillinger.io](http://dillinger.io) -->




<!-- Post description -->


<p>A modified copy of the <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">Markdown Cheatsheet</a></p>

<!-- /Post description -->


<!-- more -->


<p>This is intended as a quick reference and showcase. For more complete info, see <a href="http://daringfireball.net/projects/markdown/">John Gruber&rsquo;s original spec</a> and the <a href="http://github.github.com/github-flavored-markdown/">Github-flavored Markdown info page</a>.</p>

<p>You can play around with Markdown on a <a href="http://www.markdown-here.com/livedemo.html">live demo page</a>.</p>

<h5>Table of Contents</h5>

<p><a href="#headers">Headers</a><br/>
<a href="#emphasis">Emphasis</a><br/>
<a href="#lists">Lists</a><br/>
<a href="#links">Links</a><br/>
<a href="#images">Images</a><br/>
<a href="#code">Code and Syntax Highlighting</a><br/>
<a href="#tables">Tables</a><br/>
<a href="#blockquotes">Blockquotes</a><br/>
<a href="#html">Inline HTML</a><br/>
<a href="#hr">Horizontal Rule</a><br/>
<a href="#lines">Line Breaks</a><br/>
<a href="#videos">Videos</a></p>

<p><a name="headers"></a></p>

<h2>Headers</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># H1
</span><span class='line'>## H2
</span><span class='line'>### H3
</span><span class='line'>#### H4
</span><span class='line'>##### H5
</span><span class='line'>###### H6
</span><span class='line'>
</span><span class='line'>Alternatively, for H1 and H2, an underline-ish style:
</span><span class='line'>
</span><span class='line'>Alt-H1
</span><span class='line'>======
</span><span class='line'>
</span><span class='line'>Alt-H2
</span><span class='line'>------</span></code></pre></td></tr></table></div></figure>


<h1>H1</h1>

<h2>H2</h2>

<h3>H3</h3>

<h4>H4</h4>

<h5>H5</h5>

<h6>H6</h6>

<p>Alternatively, for H1 and H2, an underline-ish style:</p>

<h1>Alt-H1</h1>

<h2>Alt-H2</h2>

<p><a name="emphasis"></a></p>

<h2>Emphasis</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Emphasis, aka italics, with *asterisks* or _underscores_.
</span><span class='line'>
</span><span class='line'>Strong emphasis, aka bold, with **asterisks** or __underscores__.
</span><span class='line'>
</span><span class='line'>Combined emphasis with **asterisks and _underscores_**.
</span><span class='line'>
</span><span class='line'>Strikethrough uses two tildes. ~~Scratch this.~~</span></code></pre></td></tr></table></div></figure>


<p>Emphasis, aka italics, with <em>asterisks</em> or <em>underscores</em>.</p>

<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>

<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>

<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>

<p><a name="lists"></a></p>

<h2>Lists</h2>

<p>(In this example, leading and trailing spaces are shown with with dots: ⋅)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. First ordered list item
</span><span class='line'>2. Another item
</span><span class='line'>⋅⋅* Unordered sub-list. 
</span><span class='line'>1. Actual numbers don't matter, just that it's a number
</span><span class='line'>⋅⋅1. Ordered sub-list
</span><span class='line'>4. And another item.
</span><span class='line'>
</span><span class='line'>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).
</span><span class='line'>
</span><span class='line'>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅
</span><span class='line'>⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅
</span><span class='line'>⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)
</span><span class='line'>
</span><span class='line'>* Unordered list can use asterisks
</span><span class='line'>- Or minuses
</span><span class='line'>+ Or pluses</span></code></pre></td></tr></table></div></figure>


<ol>
<li>First ordered list item</li>
<li>Another item</li>
<li>Unordered sub-list.</li>
<li>Actual numbers don&rsquo;t matter, just that it&rsquo;s a number</li>
<li> Ordered sub-list</li>
<li><p>And another item.</p>

<p>You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we&rsquo;ll use three here to also align the raw Markdown).</p>

<p>To have a line break without a paragraph, you will need to use two trailing spaces.<br/>
Note that this line is separate, but within the same paragraph.<br/>
(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p></li>
<li><p>Unordered list can use asterisks</p></li>
<li>Or minuses</li>
<li>Or pluses</li>
</ol>


<p><a name="links"></a></p>

<h2>Links</h2>

<p>There are two ways to create links.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[I'm an inline-style link](https://www.google.com)
</span><span class='line'>
</span><span class='line'>[I'm an inline-style link with title](https://www.google.com "Google's Homepage")
</span><span class='line'>
</span><span class='line'>[I'm a reference-style link][Arbitrary case-insensitive reference text]
</span><span class='line'>
</span><span class='line'>[I'm a relative reference to a repository file](../blob/master/LICENSE)
</span><span class='line'>
</span><span class='line'>[You can use numbers for reference-style link definitions][1]
</span><span class='line'>
</span><span class='line'>Or leave it empty and use the [link text itself]
</span><span class='line'>
</span><span class='line'>Some text to show that the reference links can follow later.
</span><span class='line'>
</span><span class='line'>[arbitrary case-insensitive reference text]: https://www.mozilla.org
</span><span class='line'>[1]: http://slashdot.org
</span><span class='line'>[link text itself]: http://www.reddit.com</span></code></pre></td></tr></table></div></figure>


<p><a href="https://www.google.com">I&rsquo;m an inline-style link</a></p>

<p><a href="https://www.google.com" title="Google's Homepage">I&rsquo;m an inline-style link with title</a></p>

<p><a href="https://www.mozilla.org">I&rsquo;m a reference-style link</a></p>

<p><a href="../blob/master/LICENSE">I&rsquo;m a relative reference to a repository file</a></p>

<p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p>

<p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a></p>

<p>Some text to show that the reference links can follow later.</p>

<p><a name="images"></a></p>

<h2>Images</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Here's our logo (hover to see the title text):
</span><span class='line'>
</span><span class='line'>Inline-style: 
</span><span class='line'>![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 1")
</span><span class='line'>
</span><span class='line'>Reference-style: 
</span><span class='line'>![alt text][logo]
</span><span class='line'>
</span><span class='line'>[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 2"</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s our logo (hover to see the title text):</p>

<p>Inline-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" title="Logo Title Text 1" alt="alt text" /></p>

<p>Reference-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" title="Logo Title Text 2" alt="alt text" /></p>

<p><a name="code"></a></p>

<h2>Code and Syntax Highlighting</h2>

<p>Code blocks are part of the Markdown spec, but syntax highlighting isn&rsquo;t. However, many renderers &mdash; like Github&rsquo;s and <em>Markdown Here</em> &mdash; support syntax highlighting. <em>Markdown Here</em> supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the <a href="http://softwaremaniacs.org/media/soft/highlight/test.html">highlight.js demo page</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Inline `code` has `back-ticks around` it.</span></code></pre></td></tr></table></div></figure>


<p>Inline <code>code</code> has <code>back-ticks around</code> it.</p>

<p>Blocks of code are either fenced by lines with three back-ticks <code>```</code>, or are indented with four spaces. I recommend only using the fenced code blocks &mdash; they&rsquo;re easier and only they support syntax highlighting.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ```javascript
</span><span class='line'> var s = "JavaScript syntax highlighting";
</span><span class='line'> alert(s);
</span><span class='line'> ```
</span><span class='line'> 
</span><span class='line'> ```python
</span><span class='line'> s = "Python syntax highlighting"
</span><span class='line'> print s
</span><span class='line'> ```
</span><span class='line'> 
</span><span class='line'> ```
</span><span class='line'> No language indicated, so no syntax highlighting. 
</span><span class='line'> But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</span><span class='line'> ```</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="s2">&quot;JavaScript syntax highlighting&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s">&quot;Python syntax highlighting&quot;</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">No</span> <span class="n">language</span> <span class="n">indicated</span><span class="p">,</span> <span class="n">so</span> <span class="n">no</span> <span class="n">syntax</span> <span class="n">highlighting</span> <span class="ow">in</span> <span class="n">Markdown</span> <span class="n">Here</span> <span class="p">(</span><span class="n">varies</span> <span class="n">on</span> <span class="n">Github</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="n">But</span> <span class="n">let</span><span class="s">&#39;s throw in a &lt;b&gt;tag&lt;/b&gt;.</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Github Wiki pages don&rsquo;t seem to support syntax highlighting, so the above won&rsquo;t be colourful (the strings are not red, for example). Try it out in a <em>Markdown Here</em> email or a Github Markdown README or Github Issue &mdash; you can preview a new Issue without submitting it.)</p>

<p>Again, to see what languages are available for highlighting, and how to write those language names, see the <a href="http://softwaremaniacs.org/media/soft/highlight/test.html">highlight.js demo page</a>.</p>

<p><a name="tables"></a></p>

<h2>Tables</h2>

<p>Tables aren&rsquo;t part of the core Markdown spec, but they are part of GFM and <em>Markdown Here</em> supports them. They are an easy way of adding tables to your email &mdash; a task that would otherwise require copy-pasting from another application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Colons</span> <span class="n">can</span> <span class="n">be</span> <span class="n">used</span> <span class="n">to</span> <span class="n">align</span> <span class="n">columns</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">|</span> <span class="n">Tables</span>        <span class="o">|</span> <span class="n">Are</span>           <span class="o">|</span> <span class="n">Cool</span>  <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="o">-------------</span> <span class="o">|</span><span class="p">:</span><span class="o">-------------</span><span class="p">:</span><span class="o">|</span> <span class="o">-----</span><span class="p">:</span><span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">col</span> <span class="mi">3</span> <span class="ow">is</span>      <span class="o">|</span> <span class="n">right</span><span class="o">-</span><span class="n">aligned</span> <span class="o">|</span> <span class="err">$</span><span class="mi">1600</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">col</span> <span class="mi">2</span> <span class="ow">is</span>      <span class="o">|</span> <span class="n">centered</span>      <span class="o">|</span>   <span class="err">$</span><span class="mi">12</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">zebra</span> <span class="n">stripes</span> <span class="o">|</span> <span class="n">are</span> <span class="n">neat</span>      <span class="o">|</span>    <span class="err">$</span><span class="mi">1</span> <span class="o">|</span>
</span><span class='line'>
</span><span class='line'><span class="n">The</span> <span class="n">outer</span> <span class="n">pipes</span> <span class="p">(</span><span class="o">|</span><span class="p">)</span> <span class="n">are</span> <span class="n">optional</span><span class="p">,</span> <span class="ow">and</span> <span class="n">you</span> <span class="n">don</span><span class="s">&#39;t need to make the raw Markdown line up prettily. You can also use inline Markdown.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Markdown</span> <span class="o">|</span> <span class="n">Less</span> <span class="o">|</span> <span class="n">Pretty</span>
</span><span class='line'><span class="o">---</span> <span class="o">|</span> <span class="o">---</span> <span class="o">|</span> <span class="o">---</span>
</span><span class='line'><span class="o">*</span><span class="n">Still</span><span class="o">*</span> <span class="o">|</span> <span class="sb">`renders`</span> <span class="o">|</span> <span class="o">**</span><span class="n">nicely</span><span class="o">**</span>
</span><span class='line'><span class="mi">1</span> <span class="o">|</span> <span class="mi">2</span> <span class="o">|</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Colons can be used to align columns.</p>

<table>
<thead>
<tr>
<th></th>
<th> Tables        </th>
<th align="center"> Are           </th>
<th align="right"> Cool </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> col 3 is      </td>
<td align="center"> right-aligned </td>
<td align="right"> $1600 |</td>
</tr>
<tr>
<td></td>
<td> col 2 is      </td>
<td align="center"> centered      </td>
<td align="right">   $12 |</td>
</tr>
<tr>
<td></td>
<td> zebra stripes </td>
<td align="center"> are neat      </td>
<td align="right">    $1 |</td>
</tr>
</tbody>
</table>


<p>The outer pipes (|) are optional, and you don&rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p>

<table>
<thead>
<tr>
<th>Markdown </th>
<th> Less </th>
<th> Pretty</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>Still</em> </td>
<td> <code>renders</code> </td>
<td> <strong>nicely</strong></td>
</tr>
<tr>
<td>1 </td>
<td> 2 </td>
<td> 3</td>
</tr>
</tbody>
</table>


<p><a name="blockquotes"></a></p>

<h2>Blockquotes</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="n">Blockquotes</span> <span class="n">are</span> <span class="n">very</span> <span class="n">handy</span> <span class="ow">in</span> <span class="n">email</span> <span class="n">to</span> <span class="n">emulate</span> <span class="n">reply</span> <span class="n">text</span><span class="o">.</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">This</span> <span class="n">line</span> <span class="ow">is</span> <span class="n">part</span> <span class="n">of</span> <span class="n">the</span> <span class="n">same</span> <span class="n">quote</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Quote</span> <span class="k">break</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">This</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">very</span> <span class="nb">long</span> <span class="n">line</span> <span class="n">that</span> <span class="n">will</span> <span class="n">still</span> <span class="n">be</span> <span class="n">quoted</span> <span class="n">properly</span> <span class="n">when</span> <span class="n">it</span> <span class="n">wraps</span><span class="o">.</span> <span class="n">Oh</span> <span class="n">boy</span> <span class="n">let</span><span class="s">&#39;s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. </span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.</p></blockquote>

<p>Quote break.</p>

<blockquote><p>This is a very long line that will still be quoted properly when it wraps. Oh boy let&rsquo;s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p></blockquote>

<p><a name="html"></a></p>

<h2>Inline HTML</h2>

<p>You can also use raw HTML in your Markdown, and it&rsquo;ll mostly work pretty well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;</span><span class="n">dl</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">dt</span><span class="o">&gt;</span><span class="n">Definition</span> <span class="nb">list</span><span class="o">&lt;/</span><span class="n">dt</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">dd</span><span class="o">&gt;</span><span class="n">Is</span> <span class="n">something</span> <span class="n">people</span> <span class="n">use</span> <span class="n">sometimes</span><span class="o">.&lt;/</span><span class="n">dd</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">dt</span><span class="o">&gt;</span><span class="n">Markdown</span> <span class="ow">in</span> <span class="n">HTML</span><span class="o">&lt;/</span><span class="n">dt</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">dd</span><span class="o">&gt;</span><span class="n">Does</span> <span class="o">*</span><span class="ow">not</span><span class="o">*</span> <span class="n">work</span> <span class="o">**</span><span class="n">very</span><span class="o">**</span> <span class="n">well</span><span class="o">.</span> <span class="n">Use</span> <span class="n">HTML</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">tags</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;.&lt;/</span><span class="n">dd</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">dl</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<dl>
  <dt>Definition list</dt>
  <dd>Is something people use sometimes.</dd>

  <dt>Markdown in HTML</dt>
  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>
</dl>


<p><a name="hr"></a></p>

<h2>Horizontal Rule</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Three</span> <span class="ow">or</span> <span class="n">more</span><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="o">---</span>
</span><span class='line'>
</span><span class='line'><span class="n">Hyphens</span>
</span><span class='line'>
</span><span class='line'><span class="o">***</span>
</span><span class='line'>
</span><span class='line'><span class="n">Asterisks</span>
</span><span class='line'>
</span><span class='line'><span class="n">___</span>
</span><span class='line'>
</span><span class='line'><span class="n">Underscores</span>
</span></code></pre></td></tr></table></div></figure>


<p>Three or more&hellip;</p>

<hr />

<p>Hyphens</p>

<hr />

<p>Asterisks</p>

<hr />

<p>Underscores</p>

<p><a name="lines"></a></p>

<h2>Line Breaks</h2>

<p>My basic recommendation for learning how line breaks work is to experiment and discover &mdash; hit &lt;Enter&gt; once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You&rsquo;ll soon learn to get what you want. &ldquo;Markdown Toggle&rdquo; is your friend.</p>

<p>Here are some things to try out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Here</span><span class="s">&#39;s a line for us to start with.</span>
</span><span class='line'>
</span><span class='line'><span class="n">This</span> <span class="n">line</span> <span class="ow">is</span> <span class="n">separated</span> <span class="kn">from</span> <span class="nn">the</span> <span class="nn">one</span> <span class="nn">above</span> <span class="nn">by</span> <span class="nn">two</span> <span class="nn">newlines</span><span class="p">,</span> <span class="n">so</span> <span class="n">it</span> <span class="n">will</span> <span class="n">be</span> <span class="n">a</span> <span class="o">*</span><span class="n">separate</span> <span class="n">paragraph</span><span class="o">*.</span>
</span><span class='line'>
</span><span class='line'><span class="n">This</span> <span class="n">line</span> <span class="ow">is</span> <span class="n">also</span> <span class="n">a</span> <span class="n">separate</span> <span class="n">paragraph</span><span class="p">,</span> <span class="n">but</span><span class="o">...</span>
</span><span class='line'><span class="n">This</span> <span class="n">line</span> <span class="ow">is</span> <span class="n">only</span> <span class="n">separated</span> <span class="n">by</span> <span class="n">a</span> <span class="n">single</span> <span class="n">newline</span><span class="p">,</span> <span class="n">so</span> <span class="n">it</span><span class="s">&#39;s a separate line in the *same paragraph*.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a line for us to start with.</p>

<p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p>

<p>This line is also begins a separate paragraph, but&hellip;<br/>
This line is only separated by a single newline, so it&rsquo;s a separate line in the <em>same paragraph</em>.</p>

<p>(Technical note: <em>Markdown Here</em> uses GFM line breaks, so there&rsquo;s no need to use MD&rsquo;s two-space line breaks.)</p>

<p><a name="videos"></a></p>

<h2>Videos</h2>

<p>Use HTML to embed&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;</span><span class="n">iframe</span> <span class="n">width</span><span class="o">=</span><span class="s">&quot;640&quot;</span> <span class="n">height</span><span class="o">=</span><span class="s">&quot;360&quot;</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;//www.youtube.com/embed/YOUTUBE_VIDEO_ID_HERE?feature=player_detailpage&quot;</span> <span class="n">frameborder</span><span class="o">=</span><span class="s">&quot;0&quot;</span> <span class="n">allowfullscreen</span><span class="o">&gt;&lt;/</span><span class="n">iframe</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<iframe width="640" height="360" src="//www.youtube.com/embed/hFHmYFlbFn8?feature=player_detailpage" frameborder="0" allowfullscreen></iframe>


<p>Or, in pure Markdown, where they can&rsquo;t be added directly, you can add an image with a link to the video like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span><span class="err">!</span><span class="p">[</span><span class="n">IMAGE</span> <span class="n">ALT</span> <span class="n">TEXT</span> <span class="n">HERE</span><span class="p">](</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">img</span><span class="o">.</span><span class="n">youtube</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">vi</span><span class="o">/</span><span class="n">YOUTUBE_VIDEO_ID_HERE</span><span class="o">/</span><span class="mf">0.j</span><span class="n">pg</span><span class="p">)](</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">youtube</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">watch</span><span class="err">?</span><span class="n">v</span><span class="o">=</span><span class="n">YOUTUBE_VIDEO_ID_HERE</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.youtube.com/watch?v=hFHmYFlbFn8"><img src="http://img.youtube.com/vi/hFHmYFlbFn8/0.jpg" alt="Transforming Formula One: 2014 Rules Explained (Full Version)" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[get google search working on octopress site]]></title>
    <link href="http://blog.shadowcryptic.com/2014/03/14/get-google-search-working-on-octopress-site/"/>
    <updated>2014-03-14T12:00:00+00:00</updated>
    <id>http://blog.shadowcryptic.com/2014/03/14/get-google-search-working-on-octopress-site</id>
    <content type="html"><![CDATA[<!-- View or edit the markdown in this file using the [Mou app](http://mouapp.com/)
or online at [dillinger.io](http://dillinger.io) -->




<!-- Post description -->


<p>Google search not returning any results for Octopress&rsquo;s built-in search field?</p>

<!-- /Post description -->


<!-- more -->


<p>Octopress has a built-in search field that passes its duties on to Google (by default). After install of a new blog, if it&rsquo;s hosted at a new domain or subdomain, Google may need to be told about it. Follow the steps at <a href="http://www.google.com/webmasters/">Google Webmaster Tools</a> to get started.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[new ocotopress themes]]></title>
    <link href="http://blog.shadowcryptic.com/2014/03/14/new-ocotopress-themes/"/>
    <updated>2014-03-14T11:00:00+00:00</updated>
    <id>http://blog.shadowcryptic.com/2014/03/14/new-ocotopress-themes</id>
    <content type="html"><![CDATA[<!-- View or edit the markdown in this file using the [Mou app](http://mouapp.com/)
or online at [dillinger.io](http://dillinger.io) -->




<!-- Post description -->


<p>Octopress allows theme&rsquo;s to be installed&hellip;</p>

<!-- /Post description -->


<!-- more -->


<p>From the Octopress root directory:</p>

<p>Put any new themes in the <code>.themes</code> directory i.e:</p>

<pre><code>$ git clone git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash
</code></pre>

<p>Then install with the command:</p>

<pre><code>$ rake install['slash']
</code></pre>

<p>To revert to the original &lsquo;classic&rsquo; theme:</p>

<pre><code>$ rake install['classic']
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress notes]]></title>
    <link href="http://blog.shadowcryptic.com/2014/03/14/octopress-notes/"/>
    <updated>2014-03-14T10:00:00+00:00</updated>
    <id>http://blog.shadowcryptic.com/2014/03/14/octopress-notes</id>
    <content type="html"><![CDATA[<!-- View or edit the markdown in this file using the [Mou app](http://mouapp.com/)
or online at [dillinger.io](http://dillinger.io) -->




<!-- Post description -->


<p>My notes on Octopress, install and basic usage.</p>

<!-- /Post description -->


<!-- more -->


<h3>Install</h3>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress
$ mate octopress/Gemfile
</code></pre>

<p>Add rvm ruby version and gemset to top of Gemfile, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">source</span> <span class="s2">&quot;https://rubygems.org&quot;</span>
</span><span class='line'>  <span class="n">ruby</span> <span class="s1">&#39;2.1.1&#39;</span>
</span><span class='line'>  <span class="c1">#ruby-gemset=octopress</span>
</span><span class='line'>  <span class="o">.</span>
</span><span class='line'>  <span class="o">.</span>
</span><span class='line'>  <span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Move into the directory and pull it up in an editor</p>

<pre><code>$ cd octopress
$ subl ./
$ bundle install
$ rake install
</code></pre>

<h3>Basic usage</h3>

<p>When working on the site locally, run</p>

<pre><code>$ rake watch
</code></pre>

<p><em>This watches source/ and sass/ for changes and regenerates when necessary</em></p>

<p><strong>Tip</strong>: Use <a href="http://pow.cx">POW</a> to serve the site locally (i.e. at <a href="http://octopress.dev">http://octopress.dev</a>) <br/>
<strong>Power Tip</strong>: I have an alias in my <code>~/.bash_rc</code> file to automate the pow setup:</p>

<pre><code>alias pow='ln -is `pwd` ~/.pow/${PWD##*/} &amp;&amp; open http://${PWD##*/}.dev'
</code></pre>

<p>With that alias I simply enter the command:</p>

<pre><code>$ pow             # see gotcha (below)
</code></pre>

<p><em><strong>Gotcha</strong>: Despite the <code>Gemfile</code> being used (above) to switch to the correct rvm and gemset, I &lsquo;sometimes&rsquo; have to add the old <code>.rvmrc</code> file before Pow will serve the site, for example:</em></p>

<pre><code>$ cat .rvmrc &lt;&lt; rvm use 2.1.1@octopress
$ rvm rvmrc trust
$ pow             # pow now serves without falling over :-/
</code></pre>

<p>Add new posts with</p>

<pre><code>$ rake new_post["title"]
</code></pre>

<p>or a page with</p>

<pre><code>$ rake new_page[page-title]
</code></pre>

<p>To generate the blog before sending off to the hosting site:</p>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<p><em>This copies the generated files into _deploy/, adds them to git, then commits and pushes them up to the master branch where they will be published on GitHub Pages</em></p>

<p><strong>NOTE</strong>: Don&rsquo;t forget to commit the source! <em>That&rsquo;s all the code in the source repo.</em></p>

<pre><code>$ git add -all
$ git commit -m 'your message'
$ git push origin source
</code></pre>

<p><strong>NOTE</strong>: In order to split the hosting and repo after the initial install (following the octopress docs) I had to remove the origin with <code>$ git remote rm origin</code> before adding the current bitbucket one.</p>

<h3>What is Octopress?</h3>

<p>Octopress is <a href="https://github.com/mojombo/jekyll">Jekyll</a> blogging at its finest.</p>

<ol>
<li><strong>Octopress sports a clean responsive theme</strong> written in semantic HTML5, focused on readability and friendliness toward mobile devices.</li>
<li><strong>Code blogging is easy and beautiful.</strong> Embed code (with <a href="http://ethanschoonover.com/solarized">Solarized</a> styling) in your posts from gists, jsFiddle or from your filesystem.</li>
<li><strong>Third party integration is simple</strong> with built-in support for Pinboard, Delicious, GitHub Repositories, Disqus Comments and Google Analytics.</li>
<li><strong>It&rsquo;s easy to use.</strong> A collection of rake tasks simplifies development and makes deploying a cinch.</li>
<li><strong>Ships with great plug-ins</strong> some original and others from the Jekyll community &mdash; tested and improved.</li>
</ol>


<h3>Documentation</h3>

<p>Check out <a href="http://octopress.org/docs">Octopress.org</a> for guides and documentation.</p>

<p>Especially:</p>

<ul>
<li><a href="http://octopress.org/docs/updating/">Updating Octopress</a></li>
<li><a href="http://zespia.tw/Octopress-Theme-Slash/#overview">Octopress-Theme-Slash</a></li>
<li><a href="http://octopress.org/docs/blogging/code/">Sharing Code Snippets</a></li>
<li><a href="http://www.w3schools.com/charsets/ref_utf_basic_latin.asp">HTML Unicode UTF-8</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scriptogram]]></title>
    <link href="http://blog.shadowcryptic.com/2014/03/13/scriptogram/"/>
    <updated>2014-03-13T11:00:00+00:00</updated>
    <id>http://blog.shadowcryptic.com/2014/03/13/scriptogram</id>
    <content type="html"><![CDATA[<!-- View or edit the markdown in this file using the [Mou app](http://mouapp.com/)
or online at [dillinger.io](http://dillinger.io) -->




<!-- Post description -->


<p>I found a really cool Dropbox app to use for a blog. It uses markdown for writing but doesn&rsquo;t do syntax highlighting, so not much use for me.</p>

<!-- /Post description -->


<!-- more -->


<p>Anyway, it has a nice <a href="http://scriptogr.am/">sign-in page</a> which of course allows a Dropbox OAuth login. My page is listed at <a href="http://scriptogr.am/timecode/post/my-only-wish">scriptogr.am/timecode</a>.</p>

<p>Below is the &lsquo;Getting Started&rsquo; markdown that they provide so that I can use it as a reference.</p>

<hr />

<p>Date: 2014-03-13 11:00
Title: This is your blog, delivered by scriptogr.am</p>

<p>Thank you for using scriptogr.am. We hope you’ll enjoy the app. It’s designed to be fast, simple and to get the most creativity out of you.</p>

<p>scriptogr.am uses <a href="http://daringfireball.net/projects/markdown/" title="Markdown">Markdown</a>, a lightweight markup language, originally created by <a href="http://daringfireball.net/" title="Daring Fireball">John Gruber</a> and <a href="http://www.aaronsw.com/" title="Aaron Swartz">Aaron Swartz</a>. Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML). See the <a href="http://daringfireball.net/projects/markdown/syntax" title="Markdown syntax">Syntax</a> page for details pertaining to Markdown’s formatting syntax. You can try it out, right now, using the online <a href="http://daringfireball.net/projects/markdown/dingus" title="Dingus">Dingus</a>.
scriptogr.am has also implemented support for features currently not available with the plain Markdown syntax. Read more in the <a href="http://michelf.ca/projects/php-markdown/extra/" title="documentation">documentation</a>.
Note that these features are experimental, so we can&rsquo;t guarantee that they will always remain.</p>

<h1>Getting started</h1>

<p>After connecting your Dropbox account to scriptogr.am, some necessary files and folders are added to your Dropbox at <code>Apps/scriptogram</code>. First the <em>GET_STARTED.txt</em> text file that pretty much explains the exact same as what you’re reading now. Next, we’ve added a <code>posts</code> folder. This is where you add your blog <em>post</em> (&amp; <em>page</em>) files. These files are plain textfiles, but needs to be saved with the .md (markdown) extension like this: <em>yourfile.md</em></p>

<p><img src="http://dl.dropbox.com/u/35476/_scriptogram/folder.png" alt="" /></p>

<p>Please use standard, non foreign filenames. Dropbox sometimes have problem syncing filenames that contains invalid HTML characters.
We’ve added a post example page (this file) there for you to get familiar with.</p>

<h2>The template data</h2>

<p>All files needs to contain &ldquo;front block&rdquo;. The front block must be the first thing in the file and takes the form of:</p>

<pre><code>Date: 2012-04-17
Title: My first post
</code></pre>

<p>You can set any of the predefined variables (see below for a reference). But, the <em>Title</em> is required. Without the title, the system will fail.</p>

<h3>Predefined global variables</h3>

<p><em>All the variable names below are case-sensitive:</em></p>

<p><code>Required:</code></p>

<pre><code>Title
</code></pre>

<p>The title of your post (or page)</p>

<p><code>Not required, but close to:</code></p>

<pre><code>Date
</code></pre>

<p>The following date format is the correct one to use: <em>2011-12-31 12:31</em> or <em>2011-12-31</em>.
(The <em>Date</em> variable can be used to ensure correct sorting of posts.)</p>

<p><code>Optional:</code></p>

<pre><code>Published
</code></pre>

<p>Set to ’false’ if you don’t want a post to show up when the site is generated.</p>

<pre><code>Type
</code></pre>

<p>Set to ’page’ if you wan’t the post to act as a ’page’ instead of a ’post’.</p>

<pre><code>Slug
</code></pre>

<p>Custom permalink (replaces the auto generated url based on the &ldquo;Title:&rdquo; variable), especially useful if titles tend to be long or they change frequently. E.g ’my-custom-permalink-url’</p>

<pre><code>Link
</code></pre>

<p>Links the &ldquo;post&rdquo; or &ldquo;page&rdquo; title to an external source. E.g ’<a href="http://google.com%E2%80%99">http://google.com%E2%80%99</a></p>

<pre><code>Tags
</code></pre>

<p>Add tags to your posts and pages. Comma separated words. Once added, scriptogr.am will transform all tags to valid basic HTML characters.</p>

<pre><code>Excerpt
</code></pre>

<p>Add an excerpt<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> to your post or page.</p>

<h2>Difference between ’posts’ and ’pages’</h2>

<p>A <code>post</code> is a blog post.</p>

<p>A <code>page</code> is a similar as a <em>post</em>, but generates a link visible in the <em>menu</em> on your site that will lean to a page permalink.</p>

<h2>Publishing your posts</h2>

<p>This is simple. Just head to your admin panel and hit the ”Synchronize” button, or enable autosync in your settings. When logged in to scriptogr.am and visiting your own page, you’ll see the scriptogr.am logotype symbol on the top right of the browser window. This is the link that leads to your admin panel.</p>

<h2>Published vs Draft</h2>

<p>There are two ways to mark posts and pages as drafts or published. The first way is to use the draft folder. Everything you put here will be treated as draft, and everything you put direct under the posts folder will be treated as published. The ”Publish” and ”Draft” buttons in the dashboard handles these file locations for you. You can also use the Published variable, mentioned above. The Published variable will ALWAYS take precedence over the file location.</p>

<p><strong>Finally,</strong> happy posting. If you have any questions, suggestions or thoughts just drop us an <a href="mailto:info@scriptogr.am">e-mail</a> at any time.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>An <a href="http://en.wikipedia.org/wiki/Excerpt" title="Excerpt on Wikipedia">excerpt</a> is a relatively small sample passage from a longer work, such as a book or article.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
