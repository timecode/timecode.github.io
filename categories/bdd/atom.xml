<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: BDD | shadowcryptic#blog]]></title>
  <link href="http://blog.shadowcryptic.com/categories/bdd/atom.xml" rel="self"/>
  <link href="http://blog.shadowcryptic.com/"/>
  <updated>2014-04-25T14:42:48+01:00</updated>
  <id>http://blog.shadowcryptic.com/</id>
  <author>
    <name><![CDATA[Rob Playford]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding Angularjs to My Rails Bdd Stack]]></title>
    <link href="http://blog.shadowcryptic.com/2014/04/25/adding-angularjs-to-my-rails-bdd-stack/"/>
    <updated>2014-04-25T13:57:15+01:00</updated>
    <id>http://blog.shadowcryptic.com/2014/04/25/adding-angularjs-to-my-rails-bdd-stack</id>
    <content type="html"><![CDATA[<!-- View or edit the markdown in this file using the [Mou app](http://mouapp.com/) or online at [dillinger.io](http://dillinger.io) -->


<!-- Post description -->


<p>My guide to including AngularJS in a rails app, the TDD way&hellip;</p>

<!-- /Post description -->


<!-- more -->


<p>After checking out Jason Swett&rsquo;s article <a href="https://www.honeybadger.io/blog/2013/12/11/beginners-guide-to-angular-js-rails">Getting Started with AngularJS and Rails 4</a>, I discovered a few issues (the guide was already out of date), so what follows is my verified update.</p>

<p><em>Other useful bits of information discovered along the way came from Adam Anderson&rsquo;s series <a href="http://asanderson.org/posts/2013/06/03/bootstrapping-angular-rails-part-1.html">Bootstrapping an AngularJS app in Rails 4.0</a></em></p>

<h2>Install Of Individual Components</h2>

<p>The following steps describe the install of individual parts of the stack. Follow the order described.</p>

<h3>INSTALL Node.js</h3>

<p>Visit <a href="http://nodejs.org/">nodejs.org</a>, download and install the latest pkg &hellip;</p>

<p>After install check everything is ok by checking the version installed, or entering <code>$ node</code> at the command line (this will open a node javascript session):</p>

<pre><code>$ node --version
==&gt; v0.10.26

$ node
&gt; console.log('hello node’);
hello node
undefined
&gt; 
</code></pre>

<p>To exit the node.js session, hit ‘control’ + ‘c’ twice.</p>

<p><strong>Note</strong>: Additional packages may be installed for Node using Node&rsquo;s package manager.</p>

<ul>
<li>Use the command <code>$ npm search</code> to see a complete list of available packages.</li>
<li>To install a package run <code>$ npm install package-name</code></li>
<li>To list installed packages run <code>$ npm ls</code></li>
<li>To upgrade npm packages <code>$ npm upgrade</code></li>
</ul>


<h3>INSTALL Karma</h3>

<p>Karma is the &lsquo;Spectacular Test Runner for JavaScript&rsquo;. It allows JavaScript code to be executed in (multiple) real browsers. Karma simply launches an HTTP server and watches for changes to files and test specs (running tests whenever anything changes). There are plugins for most of the common testing frameworks, of which I&rsquo;ll be using Jasmine and ng-scenario.</p>

<p>When working on a project, install Karma (and then any required plugins) locally in the project&rsquo;s directory:</p>

<pre><code>$ npm install karma --save-dev
$ npm install karma-ng-scenario --save-dev
</code></pre>

<p>This will install everything into the current working directory (in a directory named <code>node_modules</code>) and also save any devDependencies (in <code>karma/package.json</code>), so that any other developers working on the project will only have to run <code>npm install</code> in order to get all the dependencies installed.</p>

<h3>SETUP Karma</h3>

<p>Once installed, the first thing to do is create karma&rsquo;s <a href="http://karma-runner.github.io/0.12/config/configuration-file.html">config file</a>:</p>

<pre><code>$ ./node_modules/karma/bin/karma init
</code></pre>

<p>This starts an interactive setup which is fairly self explanatory. However, the file structure used by the watcher may be best added manually afterwards. In the file <code>karma.conf.js</code> (at the top level of the project), add something like the following to the &lsquo;files&rsquo; array (being careful to ensure that scripts are loaded in any required order!)</p>

<pre><code>files: [
  'app/assets/javascripts/angular.js',
  'app/assets/javascripts/angular-mocks.js',
  'app/assets/javascripts/main.js.coffee',
  'app/assets/javascripts/angular/controllers/AnIndexCtrl.js.coffee',
  'app/assets/javascripts/angular/*',
  'spec/**/*_spec.js*',
],
</code></pre>

<p>Preprocessors for coffee script files (if using coffeescript) may also need to be described:</p>

<pre><code>preprocessors: {
  '**/*.coffee': ['coffee']
},
</code></pre>

<h3>RUN Karma</h3>

<p>To set Karma off, watching and running tests in real browsers:</p>

<pre><code>$ ./node_modules/karma/bin/karma start
</code></pre>

<p><strong>Note</strong>: There&rsquo;s no need to have guard running as well when in javascript TDD mode! Either kill it or set it in pause mode.</p>

<h3>An example of a working config file is listed below:</h3>

<pre><code>// Karma configuration
// Generated on Fri Apr 25 2014 12:39:49 GMT+0100 (BST)

module.exports = function(config) {
  config.set({

    // base path that will be used to resolve all patterns (eg. files, exclude)
    basePath: '',


    // frameworks to use
    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter
    frameworks: ['jasmine'],


    // list of files / patterns to load in the browser
    files: [
      'app/assets/javascripts/angular.js',
      'app/assets/javascripts/angular-mocks.js',
      'app/assets/javascripts/main.js.coffee',
      'app/assets/javascripts/angular/controllers/RestaurantIndexCtrl.js.coffee',
      'app/assets/javascripts/angular/*',
      'spec/**/*_spec.js*',
    ],


    // list of files to exclude
    exclude: [

    ],


    // preprocess matching files before serving them to the browser
    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor
    preprocessors: {
      '**/*.coffee': ['coffee']
    },


    // test results reporter to use
    // possible values: 'dots', 'progress'
    // available reporters: https://npmjs.org/browse/keyword/karma-reporter
    reporters: ['progress'],


    // web server port
    port: 9876,


    // enable / disable colors in the output (reporters and logs)
    colors: true,


    // level of logging
    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
    logLevel: config.LOG_INFO,


    // enable / disable watching file and executing tests whenever any file changes
    autoWatch: true,


    // start these browsers
    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher
    browsers: ['Chrome', 'Firefox', 'Safari'],


    // Continuous Integration mode
    // if true, Karma captures browsers, runs the tests and exits
    singleRun: false
  });
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Cucumber Support to Sublime Text]]></title>
    <link href="http://blog.shadowcryptic.com/2014/03/18/add-cucumber-support-to-sublime-text/"/>
    <updated>2014-03-18T12:02:27+00:00</updated>
    <id>http://blog.shadowcryptic.com/2014/03/18/add-cucumber-support-to-sublime-text</id>
    <content type="html"><![CDATA[<!-- View or edit the markdown in this file using the [Mou app](http://mouapp.com/) or online at [dillinger.io](http://dillinger.io) -->


<!-- Post description -->


<p>Sublime Text doesn&rsquo;t have out of the box support for Cucumber (Gherkin) syntax highlighting. It&rsquo;s simple enough to add though.</p>

<!-- /Post description -->


<!-- more -->


<p>Add the <a href="https://github.com/npverni/cucumber-sublime2-bundle">cucumber-sublime2-bundle</a> i.e.:</p>

<pre><code>$ cd ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/
$ git clone git://github.com/npverni/cucumber-sublime2-bundle.git Cucumber
</code></pre>

<p>This bundle provides syntax highlighting for both Cucumber Features (Gherkin) and Cucumber Steps. For some reason, comment toggling doesn&rsquo;t appear to work with Gherkin formatting so an additional file is required (as discovered in <a href="https://gist.github.com/unixmonkey/864839/#comment-85069">this gist</a>). To remedy the situation, add a file <code>Comments.tmPreferences</code> to the Cucumber package directory at <code>~/Library/Application Support/Sublime Text 3/Packages/Cucumber/</code>, with the following contents:</p>

<p>``` xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;!DOCTYPE plist PUBLIC &ldquo;&ndash;//Apple Computer//DTD PLIST 1.0//EN&rdquo; &ldquo;<a href="http://www.apple.com/DTDs/PropertyList-1.0.dtd">http://www.apple.com/DTDs/PropertyList-1.0.dtd</a>&rdquo;>
<plist version="1.0">
<dict></p>

<pre><code>&lt;key&gt;name&lt;/key&gt;
&lt;string&gt;Comments&lt;/string&gt;
&lt;key&gt;scope&lt;/key&gt;
&lt;string&gt;text.gherkin.feature&lt;/string&gt;
&lt;key&gt;settings&lt;/key&gt;
&lt;dict&gt;
    &lt;key&gt;shellVariables&lt;/key&gt;
    &lt;array&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;TM_COMMENT_START&lt;/string&gt;
            &lt;key&gt;value&lt;/key&gt;
            &lt;string&gt;# &lt;/string&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;TM_COMMENT_START_2&lt;/string&gt;
            &lt;key&gt;value&lt;/key&gt;
            &lt;string&gt;=begin
</code></pre>

<p></string></p>

<pre><code>        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;TM_COMMENT_END_2&lt;/string&gt;
            &lt;key&gt;value&lt;/key&gt;
            &lt;string&gt;=end
</code></pre>

<p></string></p>

<pre><code>        &lt;/dict&gt;
    &lt;/array&gt;
&lt;/dict&gt;
&lt;key&gt;uuid&lt;/key&gt;
&lt;string&gt;98793a40-e7e7-473a-89ad-74d872ad3a3b&lt;/string&gt;
</code></pre>

<p></dict>
</plist>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up My Rails BDD Stack]]></title>
    <link href="http://blog.shadowcryptic.com/2014/03/17/setting-up-my-rails-bdd-stack/"/>
    <updated>2014-03-17T20:31:11+00:00</updated>
    <id>http://blog.shadowcryptic.com/2014/03/17/setting-up-my-rails-bdd-stack</id>
    <content type="html"><![CDATA[<!-- View or edit the markdown in this file using the [Mou app](http://mouapp.com/) or online at [dillinger.io](http://dillinger.io) -->


<!-- Post description -->


<p>My guide to setting up a BDD stack for a rails app&hellip;</p>

<!-- /Post description -->


<!-- more -->


<p>I initially followed this <a href="https://semaphoreapp.com/blog/2013/08/14/setting-up-bdd-stack-on-a-new-rails-4-application.html">Rails 4 BDD article</a>, however, I&rsquo;ve made a lot of changes to get things how I want them.</p>

<p><em>Other useful bits of information discovered along the way came from articles <a href="http://www.startuprocket.com/introduction-to-app-development">Introduction to App Development</a> and <a href="http://www.startuprocket.com/blog/how-to-setup-a-rails-app-for-test-driven-and-behavior-driven-development-with-rspec-and-capybara-webkit">How to setup a Rails app for Test-Driven- and Behavior-Driven Development with Rspec and Capybara-Webkit</a>.</em></p>

<h2>Install Of Individual Components</h2>

<p><strong>Note</strong>: <em>See <a href="#summary">Summary</a> at end for &lsquo;all-at-once&rsquo; install</em> <br/>
The following steps describe the install of individual parts of the stack. It&rsquo;s best to follow the order as shown.</p>

<h3>INSTALL RSpec</h3>

<p>Add to <code>Gemfile</code>:</p>

<pre><code>group :development, :test do
  gem 'rspec-rails', '~&gt; 2.0'
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Bootstrap the app with RSpec by generating its support files and directories:</p>

<pre><code>$ rails generate rspec:install
</code></pre>

<p>Create the RSpec binstub. The binstub will allow you to run RSpec with <code>rspec</code> instead of <code>bundle exec rspec</code>:</p>

<pre><code>$ bundle binstubs rspec-core
</code></pre>

<p>Edit the <code>.rspec</code> file and change the default formatting to:</p>

<pre><code>--format doc
--color
</code></pre>

<p><em>See Fuubar gem (below) for alternative formatting option</em></p>

<h3>INSTALL Fuubar</h3>

<p>Fuubar is an instafailing RSpec formatter that uses a progress bar instead of a string of letters and dots as feedback.
Add to <code>Gemfile</code>:</p>

<pre><code>group :test do
  gem 'fuubar'
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>To use Fuubar as the default formatter, edit the <code>.rspec</code> file to the following, however, it I like to leave regular rspec (from the command line) using the above mentioned &lsquo;doc&rsquo; formatter. <em>See Guard install (below) to have Guard use Fuubar as its default formatter though!</em> :</p>

<pre><code>--format Fuubar
--color
</code></pre>

<h3>INSTALL shoulda-matchers</h3>

<p>shoulda-matchers provide RSpec-compatible one-liners that test common Rails functionality. These tests would otherwise be much longer, more complex, and error-prone.
* See <a href="https://github.com/thoughtbot/shoulda-matchers#usage">shoulda-matchers documentation</a>*
Add to <code>Gemfile</code>:</p>

<pre><code>group :test do
  gem 'shoulda-matchers'
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<h3>INSTALL Factory Girl</h3>

<p>Factory Girl is &ldquo;a library for setting up Ruby objects as test data&rdquo; or more precisely it is a fixtures replacement. <em>See <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md">Factory Girl docs</a> for usage.</em></p>

<p>Add to <code>Gemfile</code>:</p>

<pre><code>group :development, :test do
  gem 'factory_girl_rails'
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Add to RSpec&rsquo;s <code>spec_helper.rb</code> file:</p>

<pre><code>RSpec.configure do |config|
  .
  .
  .
  # Factory Girl
  config.include FactoryGirl::Syntax::Methods

end
</code></pre>

<p>Add to Cucumber&rsquo;s <code>env.rb</code> file:</p>

<pre><code>  .
  .
  .
  # Factory Girl
  World(FactoryGirl::Syntax::Methods)
</code></pre>

<h3>INSTALL Faker</h3>

<p>Faker allows creation of sample users with semi-realistic names and email addresses    .
Add to <code>Gemfile</code>:</p>

<pre><code>group :test do
  gem 'faker'
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>For example, to add a Rake task for populating the database with sample users:
Create file <code>lib/tasks/sample_data.rake</code>:</p>

<pre><code>namespace :db do
  desc "Fill database with sample data"
  task populate: :environment do
    # To add a specific user
    User.create!(name: "Example User",
                 email: "example@railstutorial.org",
                 password: "foobar",
                 password_confirmation: "foobar")
    # To add many users
    99.times do |n|
      name  = Faker::Name.name
      email = "example-#{n+1}@railstutorial.org"
      password  = "password"
      User.create!(name: name,
                   email: email,
                   password: password,
                   password_confirmation: password)
    end
  end
end
</code></pre>

<p><em>This defines a task <code>db:populate</code> that creates an example user and 99 more.</em></p>

<p>Invoke the Rake task as follows:</p>

<pre><code>$ rake db:reset
$ rake db:populate
$ rake test:prepare
</code></pre>

<p><em><strong>NOTE</strong>: See the <a href="http://faker.rubyforge.org/rdoc/">Faker docs</a> for full fakabilities!</em></p>

<h3>INSTALL Database Cleaner</h3>

<p>Database Cleaner ensures a clean database state for testing.   <br/>
Add to <code>Gemfile</code>:</p>

<pre><code>group :test do
  gem 'database_cleaner'
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Modify the file <code>spec/spec_helper.rb</code> to add Database Cleaner before the final end</p>

<pre><code>$ .
  .
  .
  RSpec.configure do |config|
  .
  .
  .
    # Database Cleaner
    config.before(:suite) do
      DatabaseCleaner.strategy = :transaction
      DatabaseCleaner.clean_with(:truncation)
    end
    config.before(:each) do
      DatabaseCleaner.start
      FactoryGirl.lint            # if FactoryGirl is installed !!!
    end
    config.after(:each) do
      DatabaseCleaner.clean
    end
  end
</code></pre>

<p>Also, modify Cucumber&rsquo;s <code>env.rb</code> file and add the <em><strong>LAST LINE</strong></em> in the following listing:</p>

<pre><code>.
.
.
# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation
DatabaseCleaner.clean_with(:truncation)
</code></pre>

<p>The <a href="https://github.com/bmabey/database_cleaner#rspec-example">RSpec example</a> on the gem site didn&rsquo;t seem to work but the one I&rsquo;ve shown here does! <br/>
The <a href="https://github.com/bmabey/database_cleaner#cucumber-example">Cucumber example</a> mentions that it gets setup Cucumber by default <em><strong>AS LONG AS</strong>_</em> it&rsquo;s present before Cucumber gets bootstrapped!*</p>

<h3>INSTALL Cucumber</h3>

<p>Cucumber helps us both focus on the feature-level and as a high-level integration testing tool.   <br/>
Add to <code>Gemfile</code>:</p>

<pre><code>group :test do
  gem 'cucumber-rails', require: false
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Bootstrap the app with Cucumber by generating its support files and directories:</p>

<pre><code>$ rails generate cucumber:install
</code></pre>

<p>Create the Cucumber binstub. The binstub will allow you to run Cucumber with <code>cucumber</code> instead of <code>bundle exec cucumber</code></p>

<pre><code>$ bundle binstubs cucumber
</code></pre>

<p><em>See the <a href="https://github.com/jnicklas/capybara#using-capybara-with-cucumber">Capybara API</a> for details of how to compose feature steps!</em></p>

<p>I add two files to Cucumber&rsquo;s features directory to start with &hellip; <br/>
The first is <code>support/paths.rb</code>:</p>

<pre><code># features/support/paths.rb
def path_to(page_name)

  case page_name

  # when /^about\s?page$/
  #   then "/static_pages/about"  # example verbose
  when /^home\s?page$/
    then static_pages_home_path   # example using routes
  when /^help\s?page$/
    then static_pages_help_path   # example using routes
  when /^about\s?page$/
    then static_pages_about_path   # example using routes
  # Add more mappings here.
  # Here is an example that pulls values out of the Regexp:
  #
  #   when /^(.*)'s profile page$/i
  #     user_profile_path(User.find_by_login($1))

  else
    begin
      # try and match to a path in the rails routes
      page_name =~ /^(.*\s?page)$/
      path_components = $1.split(/\s+/)
      self.send(path_components.push('path').join('_').to_sym)
    rescue NoMethodError, ArgumentError
      raise "Can't find mapping from \"#{page_name}\" to a path.\n" +
        "Now, go and add a mapping in #{__FILE__}"
    end
  end
end
</code></pre>

<p>The second is <code>step_definitions/common_steps.rb</code>:</p>

<pre><code># features/step_definitions/common_steps.rb
# See the Capybara API for usage
# https://github.com/jnicklas/capybara#clicking-links-and-buttons

When(/^I (go to|visit) the (.*?)$/) do |parlance, page|
  visit(path_to(page))
end

Then(/^I should see "(.*?)"$/) do |text|
  page.should have_content(text)
end
</code></pre>

<h3>INSTALL selenium-webdriver</h3>

<p><em><strong>TODO</strong>: capybara-webkit ??? Possible alternative?</em>
To be able to run Cucumber scenarios which use Javascript you need selenium-webdriver.</p>

<p>Add to <code>Gemfile</code>:</p>

<pre><code>group :test do
  gem 'selenium-webdriver'
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<h3>INSTALL Spring</h3>

<p>Add to <code>Gemfile</code>:</p>

<pre><code>group :development, :test do
  gem 'spring'
  gem 'spring-commands-rspec'
  gem 'spring-commands-cucumber'
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Bootstrap Spring (this should be done after installing anything that gets put into <code>bin/</code>, such as Rspec, Cucumber, etc):</p>

<pre><code>$ spring binstub --all
</code></pre>

<p>When using Spring with Guard (see below), ensure it is included in each <code>guard</code> listed in the <code>Guardfile</code>, for example:</p>

<pre><code>guard :rspec, cmd:"spring rspec" do
.
.
.
</code></pre>

<p>If required (not usually), Spring&rsquo;s status can be checked with:</p>

<pre><code>$ spring status
</code></pre>

<p>Also, if required, Spring&rsquo;s can be stopped with:</p>

<pre><code>$ spring stop
</code></pre>

<h3>INSTALL SimpleCov</h3>

<p>Add to <code>Gemfile</code>:</p>

<pre><code>group :test do
  gem 'simplecov', require: false
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Load and launch SimpleCov at the very top of your <code>test/test_helper.rb</code> <br/>
<em>(or <code>spec_helper.rb</code>, cucumber <code>env.rb</code>, or whatever your preferred test framework uses):</em></p>

<pre><code>require 'simplecov' # if using simple simplecov
# see https://github.com/colszowka/simplecov#filters for filter/grouping etc
SimpleCov.start do  # for example...
  add_filter '/spec/'
  add_filter '/features/'
  add_filter '/config/'
  add_group 'Controllers', 'app/controllers'
  add_group 'Models', 'app/models'
  add_group 'Helpers', 'app/helpers'
  # add_group 'Views', 'app/views' # only .rb files are included at present!
  add_group 'Libraries', 'lib'
end
# Previous content of helper now start here
</code></pre>

<p>Ensure the <code>.gitignore</code> file includes:</p>

<pre><code># Simplecov results
/coverage
</code></pre>

<p><em>See <a href="https://github.com/colszowka/simplecov#configuring-simplecov">Configuring SimpleCov</a></em></p>

<h3>INSTALL Guard</h3>

<p>Add to <code>Gemfile</code>:</p>

<pre><code>group :development, :test do
  gem 'guard'
  gem 'guard-bundler'
  gem 'guard-rails'
  gem 'guard-rspec'
  gem 'guard-cucumber'
  gem 'guard-puma' # to have Guard use the Puma server rather than WEBrick
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Generate an initial <code>Guardfile</code> with:</p>

<pre><code>$ guard init
</code></pre>

<p>Ensure guard details, similar to my prefered settings below, are in <code>Guardfile</code></p>

<pre><code># A sample Guardfile
# More info at https://github.com/guard/guard#readme

guard :bundler do
  # https://github.com/guard/guard-bundler
  watch('Gemfile')
  # Uncomment next line if your Gemfile contains the `gemspec' command.
  # watch(/^.+\.gemspec/)
end

guard :rails do
  watch('Gemfile.lock')
  watch(%r{^(config|lib)/.*})
end

guard :puma do
  watch('Gemfile.lock')
  watch(%r{^config|lib|api/.*})
end

guard :rspec,
    all_on_start: false,
    all_after_pass: false,
    cmd: 'time spring rspec --format Fuubar --color' do
    # if NOT uing Fuubar gem for formatting, use the following instead ...
    # cmd: 'time spring rspec --format progress --color' do

  # https://github.com/guard/guard-rspec

  watch(%r{^spec/.+_spec\.rb$})
  watch(%r{^lib/(.+)\.rb$})     { |m| "spec/lib/#{m[1]}_spec.rb" }
  watch('spec/spec_helper.rb')  { "spec" }

  # Rails example
  watch(%r{^app/(.+)\.rb$})                           { |m|
    "spec/#{m[1]}_spec.rb" }
  watch(%r{^app/(.*)(\.erb|\.haml|\.slim)$})          { |m|
    "spec/#{m[1]}#{m[2]}_spec.rb" }
  watch(%r{^app/controllers/(.+)_(controller)\.rb$})  { |m|
    ["spec/routing/#{m[1]}_routing_spec.rb",
    "spec/#{m[2]}s/#{m[1]}_#{m[2]}_spec.rb",
    "spec/acceptance/#{m[1]}_spec.rb"] }
  watch(%r{^spec/support/(.+)\.rb$})                  { "spec" }
  watch('config/routes.rb')                           { "spec/routing" }
  watch('app/controllers/application_controller.rb')  { "spec/controllers" }

  # Capybara features specs
  watch(%r{^app/views/(.+)/.*\.(erb|haml|slim)$})     { |m|
    "spec/features/#{m[1]}_spec.rb" }

  # Turnip features and steps
  watch(%r{^spec/acceptance/(.+)\.feature$})
  watch(%r{^spec/acceptance/steps/(.+)_steps\.rb$})   { |m|
    Dir[File.join("**/#{m[1]}.feature")][0] || 'spec/acceptance' }
end

guard :cucumber,
    all_on_start: false,
    all_after_pass: false,
    change_format: 'pretty',
    binstubs: true,
    command_prefix: 'time',
    cli: '--format progress --strict' do

  # https://github.com/guard/guard-cucumber

  watch(%r{^features/.+\.feature$})
  watch(%r{^features/support/.+$})          { 'features' }
  watch(%r{^features/step_definitions/(.+)_steps\.rb$}) { |m|
    Dir[File.join("**/#{m[1]}.feature")][0] || 'features' }

  # Capybara features specs
  watch(%r{^app/views/.*})          { 'features' }
  watch(%r{^app/controllers/.*})    { 'features' }
end
</code></pre>

<p>Run Guard (through Bundler) in a separate terminal window:</p>

<pre><code>$ bundle exec guard
</code></pre>

<p><em>See <a href="https://github.com/guard/guard">guard</a></em> <br/>
<em>See <a href="https://github.com/guard/guard-bundler">guard-bundler</a></em> <br/>
<em>See <a href="https://github.com/guard/guard-rails">guard-rails</a></em> <br/>
<em>See <a href="https://github.com/guard/guard-rspec">guard-rspec</a></em> <br/>
<em>See <a href="https://github.com/guard/guard-cucumber">guard-cucumber</a></em>  <br/>
<em>See <a href="https://github.com/jc00ke/guard-puma">guard-puma</a></em></p>

<p><a name="summary"></a></p>

<h2>Summary</h2>

<p><em>Install RSpec, Fuubar, shoulda-matchers, Factory Girl, Cucumber, selenium-webdriver, SimpleCov, Spring, and Guard in one go</em></p>

<p>Add to <code>Gemfile</code>:</p>

<pre><code># BDD
gem 'faker'

group :development, :test do
  gem 'rspec-rails'
  gem 'spring'
  gem 'spring-commands-rspec'
  gem 'spring-commands-cucumber'
  gem 'factory_girl_rails'
  gem 'guard'
  gem 'guard-bundler'
  gem 'guard-rails'
  gem 'guard-rspec'
  gem 'guard-cucumber'
  gem 'guard-puma' # to have Guard use the Puma server rather than WEBrick
end

group :test do
  gem 'shoulda-matchers'
  gem 'cucumber-rails', require: false
  gem 'database_cleaner'
  gem 'selenium-webdriver'
  gem 'simplecov', require: false
  gem 'fuubar'
end
</code></pre>

<p>then run</p>

<pre><code>$ bundle install
</code></pre>

<p>Bootstrap the app with RSpec and Cucumber by generating their support files and directories:</p>

<pre><code>$ rails generate rspec:install
$ rails generate cucumber:install
</code></pre>

<p>Create the RSpec and Cucumber binstub. The binstubs allow you to run RSpec and Cucumber with <code>rspec</code> and <code>cucumber</code> instead of <code>bundle exec rspec</code> and <code>bundle exec cucumber</code>. They will both be modified by the <code>spring binstub</code> command, so run that one last!:</p>

<pre><code>$ bundle binstubs rspec-core
$ bundle binstubs cucumber
$ spring binstub --all
</code></pre>

<p>Edit the file <code>.rspec</code> and change the default formatting to:</p>

<pre><code>--color --format doc
</code></pre>

<p>Load and launch SimpleCov at the very top of your <code>test/test_helper.rb</code> <br/>
<em>(or <code>spec_helper.rb</code>, cucumber <code>env.rb</code>, or whatever your preferred test framework uses):</em></p>

<pre><code>require 'simplecov' # if using simple simplecov
# see https://github.com/colszowka/simplecov#filters for filter/grouping etc
SimpleCov.start do  # for example...
  add_filter '/spec/'
  add_filter '/features/'
  add_filter '/config/'
  add_group 'Controllers', 'app/controllers'
  add_group 'Models', 'app/models'
  add_group 'Helpers', 'app/helpers'
  # add_group 'Views', 'app/views' # only .rb files are included at present!
  add_group 'Libraries', 'lib'
end
# This should be the default now, but just in case ...
# SimpleCov.use_merging true
# Previous content of helper now start here
</code></pre>

<p>add to <code>.gitignore</code> file:</p>

<pre><code># Simplecov results
/coverage
</code></pre>

<p>Generate an initial <code>Guardfile</code> with:</p>

<pre><code>$ guard init
</code></pre>

<p><em>See instructions in Guard&rsquo;s individual install (above) regarding <strong>MY</strong> preferred <code>Guardfile</code> contents</em></p>

<p>Run Guard (through Bundler) in a separate terminal window:</p>

<pre><code>$ bundle exec guard
</code></pre>

<p><strong>Note</strong>: To run Rspec and Cucumber, just issue <code>rake</code> at the coomand line. The format should be verbose (doc / pretty)! During regular Guard runs the format should be minimal (progress dots only, unless there are failures of course, in which case the settings above provide for a temporarily detailed output).</p>

<p>Make git commit</p>

<pre><code>$ git add .
$ git commit -m "Add BDD stack"
$ git push -u origin --all
</code></pre>
]]></content>
  </entry>
  
</feed>
